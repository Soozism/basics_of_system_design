# شاردینگ و پارتیشن‌بندی در طراحی پایگاه داده

این سند به بررسی مفاهیم **شاردینگ (Sharding)** و **پارتیشن‌بندی (Partitioning)** در طراحی پایگاه‌های داده مقیاس‌پذیر می‌پردازد. هدف این است که با ارائه تعاریف، انواع، موارد استفاده، مزایا و چالش‌ها، مثال‌های واقعی، ملاحظات طراحی، بهترین روش‌ها و دیاگرام‌ها، یک راهنمای جامع و آموزشی برای یادگیری عمیق فراهم شود. این محتوا به زبان فارسی و با فرمت مارک‌داون ارائه شده است تا برای مستندسازی آموزشی و یادگیری اصول طراحی سیستم مناسب باشد.

---

## مقدمه: چرا شاردینگ و پارتیشن‌بندی در طراحی پایگاه داده مقیاس‌پذیر مهم هستند؟

در سیستم‌های مدرن که با حجم عظیمی از داده‌ها و کاربران سروکار دارند، پایگاه‌های داده باید بتوانند بار کاری بالا را مدیریت کرده و مقیاس‌پذیری را فراهم کنند. **شاردینگ** و **پارتیشن‌بندی** دو تکنیک کلیدی برای تقسیم داده‌ها به بخش‌های کوچکتر و قابل مدیریت هستند که به بهبود عملکرد، مقیاس‌پذیری و توزیع بار کمک می‌کنند.

**اهمیت شاردینگ و پارتیشن‌بندی:**
- **مقیاس‌پذیری:** این تکنیک‌ها امکان مدیریت داده‌های بزرگ و تعداد زیادی کاربر را فراهم می‌کنند.
- **عملکرد:** با کاهش حجم داده‌های پردازش‌شده در هر عملیات، سرعت پرس‌وجوها افزایش می‌یابد.
- **تحمل خطا:** توزیع داده‌ها در چندین سرور می‌تواند از تک‌نقطه خرابی جلوگیری کند.
- **مدیریت بار کاری:** توزیع بار بین سرورها از بارگذاری بیش‌ازحد یک سرور جلوگیری می‌کند.

این تکنیک‌ها در سیستم‌های مقیاس بزرگ مانند شبکه‌های اجتماعی، پلتفرم‌های تجارت الکترونیک و برنامه‌های تحلیل داده‌های بزرگ حیاتی هستند.

---

## تعاریف

### پارتیشن‌بندی (Partitioning) چیست؟
**پارتیشن‌بندی** فرآیند تقسیم یک پایگاه داده یا جدول بزرگ به بخش‌های کوچکتر و قابل مدیریت به نام پارتیشن (Partition) است. این کار معمولاً در یک سرور یا پایگاه داده واحد انجام می‌شود تا مدیریت داده‌ها و پرس‌وجوها ساده‌تر شود.

- **ویژگی‌ها:**
  - پارتیشن‌ها معمولاً در یک نمونه پایگاه داده (Single Instance) قرار دارند.
  - هدف اصلی بهبود عملکرد پرس‌وجوها و مدیریت داده‌ها است.
  - می‌تواند به‌صورت افقی (تقسیم ردیف‌ها) یا عمودی (تقسیم ستون‌ها) انجام شود.

- **مثال:** تقسیم جدول مشتریان یک پایگاه داده به پارتیشن‌های جداگانه بر اساس محدوده زمانی (مانند مشتریان سال 2023 و 2024).

### شاردینگ (Sharding) چیست؟
**شاردینگ** تکنیکی برای توزیع داده‌ها بین چندین سرور یا گره (Node) در یک سیستم توزیع‌شده است. هر شارد (Shard) حاوی زیرمجموعه‌ای از داده‌ها است و به‌صورت مستقل مدیریت می‌شود.

- **ویژگی‌ها:**
  - شاردینگ در سیستم‌های توزیع‌شده انجام می‌شود و داده‌ها بین سرورهای مختلف تقسیم می‌شوند.
  - هدف اصلی مقیاس‌پذیری افقی و توزیع بار در سیستم‌های بزرگ است.
  - نیاز به انتخاب کلید شارد (Shard Key) برای تعیین نحوه توزیع داده‌ها دارد.

- **مثال:** توزیع داده‌های کاربران یک شبکه اجتماعی بین چندین سرور بر اساس موقعیت جغرافیایی.

### شباهت‌ها و تفاوت‌ها
- **شباهت‌ها:**
  - هر دو داده‌ها را به بخش‌های کوچکتر تقسیم می‌کنند.
  - هدف هر دو بهبود عملکرد و مدیریت‌پذیری داده‌ها است.
  - هر دو می‌توانند به‌صورت افقی یا عمودی انجام شوند.

- **تفاوت‌ها:**
  | **معیار**              | **پارتیشن‌بندی**                                     | **شاردینگ**                                         |
  |------------------------|-----------------------------------------------------|----------------------------------------------------|
  | **محل اجرا**          | معمولاً در یک سرور یا نمونه پایگاه داده            | در چندین سرور یا گره توزیع‌شده                    |
  | **هدف اصلی**          | بهبود عملکرد و مدیریت در یک پایگاه داده            | مقیاس‌پذیری افقی و توزیع بار در سیستم‌های بزرگ   |
  | **پیچیدگی**           | ساده‌تر، مدیریت در یک سیستم                       | پیچیده‌تر، نیاز به هماهنگی بین گره‌ها           |
  | **مثال ابزار**        | MySQL، PostgreSQL                                 | MongoDB، Cassandra                                |

---

## انواع پارتیشن‌بندی

### ۱. پارتیشن‌بندی افقی (Horizontal Partitioning)
- **تعریف:** تقسیم ردیف‌های یک جدول به پارتیشن‌های جداگانه بر اساس معیاری خاص (مانند محدوده مقادیر یا کلید).
- **مثال:** تقسیم جدول سفارشات به پارتیشن‌های جداگانه برای هر سال (سفارشات 2023، 2024).
- **مزایا:**
  - کاهش حجم داده‌های اسکن‌شده در پرس‌وجوها.
  - بهبود عملکرد برای پرس‌وجوهای مبتنی بر محدوده.
- **چالش‌ها:** نیاز به انتخاب معیار مناسب برای تقسیم‌بندی.

### ۲. پارتیشن‌بندی عمودی (Vertical Partitioning)
- **تعریف:** تقسیم ستون‌های یک جدول به زیرمجموعه‌های جداگانه، معمولاً بر اساس الگوهای دسترسی.
- **مثال:** ذخیره‌سازی ستون‌های پراستفاده (مانند نام و ایمیل) در یک پارتیشن و ستون‌های کم‌استفاده (مانند آدرس) در پارتیشن دیگر.
- **مزایا:**
  - بهبود عملکرد برای پرس‌وجوهایی که به تعداد محدودی ستون نیاز دارند.
  - کاهش استفاده از حافظه.
- **چالش‌ها:** ممکن است نیاز به Join برای ترکیب داده‌ها باشد.

---

## شاردینگ در سیستم‌های توزیع‌شده

### نحوه عملکرد شاردینگ
- **فرآیند:**
  1. داده‌ها بر اساس یک **کلید شارد (Shard Key)** به شاردهای مختلف تقسیم می‌شوند.
  2. هر شارد روی یک سرور یا گره جداگانه ذخیره می‌شود.
  3. یک سیستم مسیریابی (مانند تعادل‌کننده بار یا Router) درخواست‌ها را به شارد مناسب هدایت می‌کند.
- **اجزا:**
  - **کلید شارد:** معیاری برای تقسیم داده‌ها (مانند ID کاربر یا موقعیت جغرافیایی).
  - **Router/Coordinator:** مسئول هدایت پرس‌وجوها به شارد مناسب.
  - **تکرار (Replication):** هر شارد ممکن است نسخه‌های تکراری در گره‌های دیگر داشته باشد برای تحمل خطا.

### موارد استفاده در برنامه‌های مقیاس بزرگ
- **شبکه‌های اجتماعی:** توزیع داده‌های کاربران بر اساس موقعیت جغرافیایی (مانند فیسبوک).
- **تجارت الکترونیک:** تقسیم داده‌های سفارشات بر اساس مشتری یا منطقه (مانند آمازون).
- **تحلیل داده‌های بزرگ:** ذخیره‌سازی لاگ‌های سرور یا داده‌های حسگرها در شاردهای مختلف (مانند نتفلیکس).

### اهمیت کلید شارد
- **کلید شارد** تعیین می‌کند که داده‌ها چگونه بین شاردها توزیع شوند. انتخاب کلید مناسب برای توزیع یکنواخت بار و عملکرد بهینه حیاتی است.
- **مثال‌های کلید شارد:**
  - **ID کاربر:** مناسب برای برنامه‌هایی که داده‌ها بر اساس کاربر تقسیم می‌شوند.
  - **موقعیت جغرافیایی:** برای سیستم‌های چندمنطقه‌ای.
  - **محدوده زمانی:** برای داده‌های سری زمانی (مانند لاگ‌ها).
- **چالش‌ها:** انتخاب کلید نامناسب می‌تواند به توزیع نابرابر (Hot Sharding) منجر شود.

---

## مزایا و چالش‌های هر رویکرد

### پارتیشن‌بندی
- **مزایا:**
  - بهبود عملکرد پرس‌وجوها با کاهش حجم داده‌های اسکن‌شده.
  - مدیریت آسان‌تر در یک نمونه پایگاه داده.
  - مناسب برای پایگاه‌های داده رابطه‌ای مانند MySQL و PostgreSQL.
- **چالش‌ها:**
  - محدودیت‌های مقیاس‌پذیری عمودی (وابستگی به منابع یک سرور).
  - پیچیدگی در مدیریت پارتیشن‌ها برای داده‌های بزرگ.
  - نیاز به طراحی دقیق برای انتخاب معیار پارتیشن‌بندی.

### شاردینگ
- **مزایا:**
  - مقیاس‌پذیری افقی با افزودن سرورهای جدید.
  - تحمل خطا و دسترسی‌پذیری بالا در سیستم‌های توزیع‌شده.
  - مناسب برای داده‌های بزرگ و بارهای کاری سنگین.
- **چالش‌ها:**
  - پیچیدگی در مدیریت هماهنگی بین شاردها.
  - انتخاب کلید شارد نامناسب می‌تواند به توزیع نابرابر منجر شود.
  - عملیات Join و پرس‌وجوهای پیچیده دشوارتر هستند.

---

## مثال‌های واقعی

1. **MongoDB:**
   - **پیاده‌سازی شاردینگ:** MongoDB از شاردینگ خودکار پشتیبانی می‌کند. داده‌ها بر اساس کلید شارد (مانند ID کاربر) بین گره‌ها توزیع می‌شوند.
   - **مثال:** یک پلتفرم وب مانند Medium از MongoDB برای ذخیره‌سازی مقالات و داده‌های کاربران استفاده می‌کند، با شاردینگ بر اساس ID کاربر.
   - **ویژگی‌ها:** پشتیبانی از شاردینگ افقی و تکرار برای تحمل خطا.

2. **Cassandra:**
   - **پیاده‌سازی شاردینگ:** Cassandra به‌صورت پیش‌فرض از شاردینگ توزیع‌شده با معماری حلقوی (Ring Architecture) استفاده می‌کند.
   - **مثال:** نتفلیکس از Cassandra برای ذخیره‌سازی لاگ‌های کاربران و داده‌های پخش ویدئو استفاده می‌کند، با شاردینگ بر اساس منطقه یا زمان.
   - **ویژگی‌ها:** مقیاس‌پذیری خطی و دسترسی‌پذیری بالا (AP در قضیه CAP).

3. **MySQL/PostgreSQL (پارتیشن‌بندی):**
   - **پیاده‌سازی پارتیشن‌بندی:** MySQL از پارتیشن‌بندی افقی (مانند Range یا List) و PostgreSQL از پارتیشن‌بندی پیشرفته (مانند Declarative Partitioning) پشتیبانی می‌کند.
   - **مثال:** یک سیستم تجارت الکترونیک از MySQL برای پارتیشن‌بندی سفارشات بر اساس سال استفاده می‌کند.
   - **ویژگی‌ها:** مناسب برای داده‌های ساخت‌یافته با پرس‌وجوهای پیچیده.

---

## ملاحظات طراحی و تریدآف‌ها

### ملاحظات طراحی
1. **انتخاب کلید شارد یا پارتیشن:**
   - کلید باید توزیع یکنواخت داده‌ها را تضمین کند (مانند استفاده از Hash یا محدوده مناسب).
   - از کلیدهایی که باعث Hot Sharding می‌شوند (مانند تاریخ‌های اخیر) اجتناب کنید.
2. **مدیریت رشد داده‌ها:**
   - برنامه‌ریزی برای افزودن شاردهای جدید یا تغییر پارتیشن‌ها با رشد داده‌ها.
3. **تحمل خطا:**
   - استفاده از تکرار برای اطمینان از دسترسی‌پذیری در صورت خرابی شارد یا گره.
4. **پرس‌وجوهای پیچیده:**
   - در شاردینگ، عملیات Join دشوار است؛ از Denormalization یا پایگاه‌های داده مکمل استفاده کنید.
5. **مانیتورینگ و نگهداری:**
   - استفاده از ابزارهای مانیتورینگ (مانند Prometheus) برای بررسی توزیع بار و عملکرد شاردها.

### تریدآف‌ها
- **عملکرد در مقابل پیچیدگی:** شاردینگ عملکرد را در مقیاس بزرگ بهبود می‌بخشد، اما پیچیدگی مدیریت را افزایش می‌دهد.
- **سازگاری در مقابل دسترسی‌پذیری:** شاردینگ در پایگاه‌های داده NoSQL (مانند Cassandra) معمولاً دسترسی‌پذیری را به سازگاری ترجیح می‌دهد (AP).
- **هزینه:** شاردینگ نیاز به سرورهای بیشتر و زیرساخت‌های توزیع‌شده دارد که هزینه‌ها را افزایش می‌دهد.

---

## بهترین روش‌ها برای پیاده‌سازی شاردینگ یا پارتیشن‌بندی

1. **تحلیل نیازهای سیستم:**
   - حجم داده‌ها، الگوهای دسترسی و نیازهای مقیاس‌پذیری را بررسی کنید.
   - مشخص کنید که آیا پارتیشن‌بندی در یک سرور کافی است یا نیاز به شاردینگ توزیع‌شده دارید.
2. **انتخاب کلید مناسب:**
   - کلید شارد یا پارتیشن باید توزیع یکنواخت داده‌ها را تضمین کند.
   - از کلیدهای با توزیع غیریکنواخت (مانند تاریخ‌های اخیر) اجتناب کنید.
3. **استفاده از ابزارهای مناسب:**
   - برای RDBMS، از قابلیت‌های داخلی مانند پارتیشن‌بندی در PostgreSQL استفاده کنید.
   - برای NoSQL، از شاردینگ خودکار در MongoDB یا Cassandra بهره ببرید.
4. **تکرار برای تحمل خطا:**
   - هر شارد یا پارتیشن را در چندین گره تکرار کنید تا از خرابی جلوگیری شود.
5. **مانیتورینگ و بهینه‌سازی:**
   - از ابزارهایی مانند Grafana و Prometheus برای نظارت بر عملکرد شاردها استفاده کنید.
   - توزیع داده‌ها را به‌طور دوره‌ای بررسی کنید تا از Hot Sharding جلوگیری شود.
6. **طراحی برای پرس‌وجوها:**
   - داده‌ها را Denormalize کنید تا نیاز به Join در شاردینگ کاهش یابد.
   - از پایگاه‌های داده مکمل (مانند Redis برای کشینگ) استفاده کنید.

---

## خلاصه و دیاگرام‌های تصویری

### خلاصه
- **پارتیشن‌بندی** برای بهبود عملکرد و مدیریت داده‌ها در یک پایگاه داده واحد مناسب است و به‌صورت افقی یا عمودی انجام می‌شود.
- **شاردینگ** برای مقیاس‌پذیری افقی در سیستم‌های توزیع‌شده طراحی شده و داده‌ها را بین سرورهای مختلف تقسیم می‌کند.
- **انتخاب بین این دو:** پارتیشن‌بندی برای سیستم‌های کوچک تا متوسط و شاردینگ برای سیستم‌های مقیاس بزرگ مناسب است.
- **درس کلیدی:** انتخاب کلید شارد یا پارتیشن مناسب و مدیریت توزیع داده‌ها برای عملکرد بهینه حیاتی است.

### دیاگرام پارتیشن‌بندی افقی

```
[جدول بزرگ]
   |
   v
+------------+------------+
| پارتیشن ۱ | پارتیشن ۲ |
| (2023)    | (2024)    |
+------------+------------+
```

**توضیح:** جدول سفارشات به پارتیشن‌های جداگانه برای سال‌های مختلف تقسیم شده و در یک سرور ذخیره می‌شود.

### دیاگرام شاردینگ

```
[کاربر] --> [Router]
                  |
                  v
+------------+------------+------------+
| شارد ۱    | شارد ۲    | شارد ۳    |
| (منطقه ۱) | (منطقه ۲) | (منطقه ۳) |
+------------+------------+------------+
```

**توضیح:** داده‌ها بر اساس منطقه جغرافیایی بین شاردهای مختلف در سرورهای جداگانه توزیع شده‌اند.

---

## منابع پیشنهادی برای مطالعه بیشتر

1. *Designing Data-Intensive Applications* نوشته مارتین کلپمن: کتابی جامع برای یادگیری شاردینگ و پارتیشن‌بندی.
2. *The System Design Primer* (منبع متن‌باز در GitHub): راهنمایی برای طراحی سیستم‌های مقیاس‌پذیر.
3. وبلاگ‌های مهندسی:
   - *MongoDB Blog*: مقالات در مورد شاردینگ در MongoDB.
   - *Cassandra Blog*: توضیحات در مورد شاردینگ توزیع‌شده و معماری حلقوی.
   - *AWS Database Blog*: مقالات در مورد پارتیشن‌بندی در Aurora و DynamoDB.
4. دوره‌های آنلاین:
   - *Grokking the System Design Interview* در DesignGuru.io
   - *System Design Course* در Educative.io
5. مستندات رسمی:
   - [MongoDB Sharding Documentation](https://www.mongodb.com/docs/manual/sharding/)
   - [Cassandra Architecture](https://cassandra.apache.org/doc/latest/architecture/)
   - [PostgreSQL Partitioning](https://www.postgresql.org/docs/current/ddl-partitioning.html)

---

این سند مفهوم شاردینگ و پارتیشن‌بندی را به‌صورت جامع توضیح می‌دهد و برای مستندسازی آموزشی و یادگیری طراحی سیستم مناسب است. در صورت نیاز به توضیحات عمیق‌تر یا مثال‌های بیشتر، لطفاً اطلاع دهید!