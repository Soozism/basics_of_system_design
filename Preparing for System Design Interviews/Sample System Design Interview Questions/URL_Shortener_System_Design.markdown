# طراحی سیستم کوتاه‌کننده URL برای مصاحبه‌های طراحی سیستم

## مقدمه
طراحی یک سیستم کوتاه‌کننده URL یکی از سوالات رایج در مصاحبه‌های طراحی سیستم است که توانایی کاندیدا در مدیریت نیازمندی‌های کارکردی و غیرکارکردی، طراحی معماری مقیاس‌پذیر، و حل چالش‌های فنی را ارزیابی می‌کند. این سیستم باید بتواند URLهای طولانی را به لینک‌های کوتاه تبدیل کند، ریدایرکت سریع ارائه دهد، و در برابر بار بالا و تهدیدات امنیتی مقاوم باشد. این سند به بررسی نیازمندی‌ها، معماری، اجزای سیستم، روش‌های تولید URL کوتاه، مدل‌سازی داده‌ها، مقیاس‌پذیری، امنیت، و نکات مصاحبه برای مهندسان نرم‌افزار فارسی‌زبان می‌پردازد.

---

## نیازمندی‌های سیستم

### نیازمندی‌های کارکردی (Functional Requirements)
1. **کوتاه کردن URL:** کاربران می‌توانند یک URL طولانی را وارد کرده و یک URL کوتاه دریافت کنند.
   - مثال: `https://example.com/very/long/path` → `https://short.ly/abc123`
2. **ریدایرکت:** با وارد کردن URL کوتاه، کاربر به URL اصلی هدایت می‌شود.
3. **لینک‌های سفارشی:** امکان ایجاد URLهای کوتاه سفارشی (مانند `short.ly/mycustomlink`).
4. **آنالیتیکس:** ارائه آمار کلیک‌ها (مانند تعداد کلیک‌ها، زمان کلیک، یا مکان).
5. **انقضا:** امکان تنظیم تاریخ انقضای URLهای کوتاه.

### نیازمندی‌های غیرکارکردی (Non-Functional Requirements)
1. **مقیاس‌پذیری:** پشتیبانی از میلیاردها URL و میلیون‌ها درخواست در ثانیه.
2. **قابلیت اطمینان:** آپ‌تایم 99.99% برای جلوگیری از قطعی سرویس.
3. **عملکرد:** زمان پاسخ‌گویی کمتر از 200 میلی‌ثانیه برای ریدایرکت.
4. **امنیت:** جلوگیری از سوءاستفاده (مانند لینک‌های مخرب یا اسپم).
5. **قابلیت نگهداری:** طراحی ماژولار برای سهولت توسعه و عیب‌یابی.

---

## معماری سطح بالا

### اجزای سیستم
1. **کلاینت:** رابط کاربری (وب یا اپلیکیشن) و APIها برای تعامل با کاربران.
2. **Load Balancer:** توزیع ترافیک بین سرورهای اپلیکیشن برای مقیاس‌پذیری.
3. **سرورهای اپلیکیشن:** مدیریت منطق کسب‌وکار (تولید URL کوتاه، ریدایرکت، آنالیتیکس).
4. **کش (Caching Layer):** ذخیره‌سازی جفت‌های URL کوتاه و اصلی برای دسترسی سریع.
5. **پایگاه داده:** ذخیره‌سازی دائمی URLها، اطلاعات کاربران، و داده‌های آنالیتیکس.
6. **سیستم آنالیتیکس:** جمع‌آوری و پردازش داده‌های کلیک.
7. **لایه امنیتی:** فیلتر کردن لینک‌های مخرب و محدود کردن نرخ درخواست‌ها.

### دیاگرام معماری
```
[کلاینت: وب/موبایل] <--> [Load Balancer]
                             |
                      [سرورهای اپلیکیشن]
                             |
                    ----------------------
                    |                    |
               [کش: Redis]         [پایگاه داده: DynamoDB]
                    |                    |
                [آنالیتیکس]         [فیلتر امنیتی]
```

---

## تولید URL کوتاه و مدیریت برخورد (Collision)

### روش‌های تولید URL کوتاه
1. **هشینگ (Hashing):**
   - استفاده از الگوریتم‌های هش مانند MD5 یا SHA-1 برای تبدیل URL طولانی به یک رشته کوتاه (مانند 6-8 کاراکتر).
   - **مشکل:** احتمال برخورد (دو URL مختلف به یک هش یکسان تبدیل شوند).
   - **راه‌حل:** بررسی وجود کلید در پایگاه داده و تولید مجدد در صورت برخورد.
2. **شمارنده افزایشی با Base62:**
   - استفاده از یک شناسه عددی افزایشی (مانند 1001) و تبدیل آن به Base62 (a-z, A-Z, 0-9).
   - **فرمول:** `short_url = encode_base62(incremental_id)`
   - **مزایا:** تضمین یکتایی، بدون نیاز به بررسی برخورد.
   - **مثال:** 1001 → `abc123`
3. **ترکیب تصادفی:** تولید رشته‌های تصادفی 6-8 کاراکتری و بررسی یکتایی در پایگاه داده.

### انتخاب روش
- **روش پیشنهادی:** Base62 با شمارنده افزایشی.
  - دلیل: سادگی، یکتایی تضمین‌شده، و مقیاس‌پذیری با استفاده از یک سرویس توزیع‌شده مانند ZooKeeper برای مدیریت شمارنده.

### طول URL کوتاه
- با 6 کاراکتر در Base62 (62^6 ≈ 56.8 میلیارد ترکیب)، می‌توان میلیاردها لینک را پشتیبانی کرد.
- برای مقیاس‌پذیری بیشتر، می‌توان طول را به 7 یا 8 کاراکتر افزایش داد.

---

## مدل‌سازی داده‌ها و طراحی پایگاه داده

### ساختار داده‌ها
1. **جدول URLها:**
   - **کلیدها:** 
     - `short_url` (کلید اصلی، رشته Base62)
     - `original_url` (URL اصلی)
     - `user_id` (شناسه کاربر، اختیاری)
     - `created_at` (زمان ایجاد)
     - `expires_at` (زمان انقضا، اختیاری)
     - `click_count` (تعداد کلیک‌ها)
   - **مثال:**
     ```json
     {
       "short_url": "abc123",
       "original_url": "https://example.com/long-url",
       "user_id": "user123",
       "created_at": "2025-07-12T12:00:00Z",
       "expires_at": "2026-07-12T12:00:00Z",
       "click_count": 150
     }
     ```
2. **جدول آنالیتیکس:**
   - **کلیدها:**
     - `short_url` (کلید خارجی)
     - `timestamp` (زمان کلیک)
     - `ip_address` (آدرس IP کاربر)
     - `user_agent` (اطلاعات دستگاه)
   - **مثال:**
     ```json
     {
       "short_url": "abc123",
       "timestamp": "2025-07-12T12:01:00Z",
       "ip_address": "192.168.1.1",
       "user_agent": "Mozilla/5.0..."
     }
     ```

### انتخاب پایگاه داده
- **NoSQL (مانند DynamoDB یا MongoDB):**
  - مناسب برای مقیاس‌پذیری افقی و دسترسی سریع.
  - پشتیبانی از داده‌های غیرساختاریافته برای آنالیتیکس.
- **کش (Redis یا Memcached):**
  - ذخیره جفت‌های `short_url` و `original_url` برای ریدایرکت سریع.
- **SQL (اختیاری):**
  - برای داده‌های رابطه‌ای مانند اطلاعات کاربران یا گزارش‌های پیچیده.

---

## طراحی API و جریان تعامل

### APIهای اصلی
1. **ایجاد URL کوتاه:**
   - **درخواست:** `POST /api/shorten`
   - **بدنه درخواست:**
     ```json
     {
       "original_url": "https://example.com/long-url",
       "custom_alias": "mylink", // اختیاری
       "expires_at": "2026-07-12T12:00:00Z" // اختیاری
     }
     ```
   - **پاسخ:**
     ```json
     {
       "short_url": "https://short.ly/abc123",
       "original_url": "https://example.com/long-url",
       "expires_at": "2026-07-12T12:00:00Z"
     }
     ```
2. **ریدایرکت URL:**
   - **درخواست:** `GET /:short_url`
   - **پاسخ:** ریدایرکت 301 به URL اصلی.
3. **دریافت آنالیتیکس:**
   - **درخواست:** `GET /api/analytics/:short_url`
   - **پاسخ:**
     ```json
     {
       "short_url": "abc123",
       "click_count": 150,
       "last_clicked": "2025-07-12T12:01:00Z"
     }
     ```

### جریان تعامل
1. **ایجاد URL کوتاه:**
   - کاربر URL طولانی را ارسال می‌کند.
   - سرور یک کلید کوتاه با Base62 تولید می‌کند.
   - جفت URL در Redis و پایگاه داده ذخیره می‌شود.
   - URL کوتاه به کاربر بازگردانده می‌شود.
2. **ریدایرکت:**
   - کاربر URL کوتاه را وارد می‌کند.
   - سرور ابتدا Redis را بررسی می‌کند؛ اگر یافت نشد، به پایگاه داده مراجعه می‌کند.
   - کاربر به URL اصلی هدایت شده و کلیک در آنالیتیکس ثبت می‌شود.
3. **آنالیتیکس:**
   - سرور داده‌های کلیک را از پایگاه داده یا سیستم آنالیتیکس جداگانه (مانند Kafka) بازیابی می‌کند.

---

## مدیریت مقیاس‌پذیری، قابلیت اطمینان و تحمل خطا

### مقیاس‌پذیری
- **چالش:** مدیریت میلیون‌ها درخواست در ثانیه و میلیاردها URL.
- **راه‌حل‌ها:**
  - **Load Balancer:** توزیع ترافیک با AWS ALB یا Nginx.
  - **کش:** استفاده از Redis برای کاهش بار پایگاه داده (95% درخواست‌های ریدایرکت از کش پاسخ داده می‌شود).
  - **پایگاه داده مقیاس‌پذیر:** DynamoDB با پارتیشن‌بندی خودکار.
  - **مقیاس‌بندی افقی:** افزودن سرورهای اپلیکیشن با Kubernetes.

### قابلیت اطمینان
- **چالش:** جلوگیری از قطعی سرویس و از دست رفتن داده‌ها.
- **راه‌حل‌ها:**
  - **افزونگی (Redundancy):** استفاده از چندین منطقه (Multi-Region) در AWS.
  - **پشتیبان‌گیری:** ذخیره‌سازی داده‌ها در Replicaهای متعدد.
  - **Failover:** جابجایی خودکار به سرورهای سالم با ابزارهایی مانند AWS Route 53.

### تحمل خطا
- **چالش:** مدیریت خرابی سرورها یا پایگاه داده.
- **راه‌حل‌ها:**
  - **Circuit Breaker:** جلوگیری از خرابی‌های زنجیره‌ای با ابزارهایی مانند Hystrix.
  - **Retry Logic:** پیاده‌سازی تلاش مجدد برای درخواست‌های ناموفق.
  - **مانیتورینگ:** استفاده از Prometheus و Grafana برای تشخیص سریع خرابی‌ها.

---

## شناسایی و رفع گلوگاه‌های بالقوه

1. **گلوگاه پایگاه داده:**
   - **مشکل:** خواندن/نوشتن مکرر به پایگاه داده باعث تأخیر می‌شود.
   - **راه‌حل:** استفاده از Redis برای کش کردن URLها و کاهش بار پایگاه داده.
2. **نرخ تولید URL:**
   - **مشکل:** تولید کلیدهای یکتا در مقیاس بالا چالش‌برانگیز است.
   - **راه‌حل:** استفاده از ZooKeeper یا یک سرویس توزیع‌شده برای مدیریت شمارنده افزایشی.
3. **ترافیک ریدایرکت:**
   - **مشکل:** حجم بالای درخواست‌های ریدایرکت می‌تواند سرورها را تحت فشار قرار دهد.
   - **راه‌حل:** استفاده از CDN (مانند Cloudflare) برای ریدایرکت سریع و کاهش بار سرور.

---

## ملاحظات امنیتی

1. **جلوگیری از لینک‌های مخرب:**
   - **راه‌حل:** بررسی URLها در برابر لیست سیاه (مانند Google Safe Browsing).
2. **محدودیت نرخ (Rate Limiting):**
   - **راه‌حل:** محدود کردن تعداد درخواست‌های ایجاد URL برای هر کاربر با Nginx یا Redis.
3. **احراز هویت:**
   - **راه‌حل:** اجباری کردن ورود کاربر برای ایجاد لینک‌های سفارشی با OAuth یا JWT.
4. **رمزنگاری:**
   - **راه‌حل:** استفاده از HTTPS (TLS 1.3) برای تمام ارتباطات و رمزنگاری داده‌های حساس در پایگاه داده.

---

## گسترش سیستم برای آنالیتیکس و لینک‌های سفارشی

### آنالیتیکس
- **نیازمندی:** ثبت تعداد کلیک‌ها، زمان، مکان و دستگاه کاربران.
- **طراحی:**
  - ذخیره داده‌های کلیک در یک پایگاه داده جداگانه (مانند Elasticsearch یا Kafka).
  - استفاده از یک سیستم پردازش جریان (مانند Apache Kafka) برای تحلیل بلادرنگ.
  - ارائه API برای گزارش‌گیری (مانند تعداد کلیک‌ها در یک بازه زمانی).
- **مثال:**
  - گزارش تعداد کلیک‌های یک URL کوتاه در 24 ساعت گذشته.

### لینک‌های سفارشی
- **نیازمندی:** امکان ایجاد URLهای کوتاه دلخواه توسط کاربران.
- **طراحی:**
  - بررسی یکتایی لینک سفارشی در پایگاه داده.
  - محدود کردن دسترسی به لینک‌های سفارشی با احراز هویت.
  - **مثال:** کاربر می‌تواند `short.ly/mycustomlink` را ایجاد کند.

---

## نکات برای ارائه طراحی در مصاحبه

1. **شروع با نیازمندی‌ها:**
   - ابتدا نیازمندی‌های کارکردی و غیرکارکردی را با مصاحبه‌کننده تأیید کنید.
   - مثال: آیا لینک‌های سفارشی یا آنالیتیکس موردنیاز است؟
2. **ارائه دیاگرام معماری:**
   - یک دیاگرام ساده (مانند C4) رسم کنید و اجزا (مانند Load Balancer، Redis، DynamoDB) را توضیح دهید.
3. **توضیح تریدآف‌ها:**
   - مزایا و معایب هر تصمیم (مانند هشینگ در مقابل Base62) را بحث کنید.
4. **تمرکز بر NFRها:**
   - نشان دهید که چگونه مقیاس‌پذیری، عملکرد و امنیت را مدیریت می‌کنید.
   - مثال: استفاده از Redis برای کاهش تأخیر ریدایرکت.
5. **جزئیات فنی:**
   - الگوریتم تولید URL، مدل داده، و انتخاب فناوری‌ها را با جزئیات توضیح دهید.
6. **ارتباط شفاف:**
   - مراحل طراحی را به‌صورت ساختاریافته (نیازمندی‌ها → معماری → چالش‌ها) ارائه دهید.
   - از اصطلاحات فنی دقیق استفاده کنید و سوالات مصاحبه‌کننده را پاسخ دهید.

---

## خلاصه
طراحی یک سیستم کوتاه‌کننده URL نیازمند توجه به نیازمندی‌های کارکردی (مانند کوتاه کردن و ریدایرکت) و غیرکارکردی (مانند مقیاس‌پذیری و امنیت) است. معماری شامل Load Balancer، سرورهای اپلیکیشن، کش، و پایگاه داده مقیاس‌پذیر است. تولید URL کوتاه با Base62 و مدیریت گلوگاه‌ها با کش و CDN امکان‌پذیر است. امنیت با فیلتر URL، محدودیت نرخ و HTTPS تضمین می‌شود. در مصاحبه، تمرکز بر نیازمندی‌ها، ارائه دیاگرام واضح، بحث درباره تریدآف‌ها و توضیح جزئیات فنی کلیدی است. با این رویکرد، می‌توانید یک سیستم مقیاس‌پذیر، قابل‌اعتماد و امن طراحی کنید که برای مصاحبه‌های طراحی سیستم مناسب باشد.