# طراحی سیستم‌های مقیاس‌پذیر در دنیای واقعی: کوتاه‌کننده URL

## مقدمه
طراحی سیستم‌های مقیاس‌پذیر مانند یک کوتاه‌کننده URL (مانند bit.ly) یا یک نسخه ساده‌شده از توییتر، یکی از موضوعات رایج در مصاحبه‌های طراحی سیستم است. این سیستم‌ها باید بتوانند حجم زیادی از درخواست‌ها را مدیریت کنند، عملکرد بالایی داشته باشند و قابلیت اطمینان بالایی ارائه دهند. این سند به بررسی طراحی یک سیستم کوتاه‌کننده URL می‌پردازد و شامل نیازمندی‌ها، معماری، مدل‌سازی داده‌ها، طراحی API، چالش‌های مقیاس‌پذیری، تریدآف‌ها، فناوری‌های پیشنهادی و انتظارات مصاحبه‌کنندگان است. این محتوا برای مهندسان نرم‌افزار فارسی‌زبان که برای مصاحبه‌های طراحی سیستم آماده می‌شوند، طراحی شده است.

---

## نیازمندی‌ها و ویژگی‌های کلیدی

### نیازمندی‌های کارکردی (Functional Requirements)
1. **کوتاه کردن URL:** کاربران می‌توانند یک URL طولانی را وارد کرده و یک URL کوتاه دریافت کنند.
2. **ریدایرکت:** با وارد کردن URL کوتاه، کاربر به URL اصلی هدایت می‌شود.
3. **لینک‌های سفارشی:** امکان ایجاد URLهای کوتاه سفارشی (مانند bit.ly/customlink).
4. **آنالیتیکس:** ارائه آمار استفاده از لینک (مانند تعداد کلیک‌ها).
5. **انقضا:** امکان تنظیم تاریخ انقضای URLهای کوتاه.

### نیازمندی‌های غیرکارکردی (Non-Functional Requirements)
1. **مقیاس‌پذیری:** پشتیبانی از میلیاردها URL و میلیون‌ها درخواست در ثانیه.
2. **قابلیت اطمینان:** آپ‌تایم 99.99% و حداقل قطعی سرویس.
3. **عملکرد:** زمان پاسخ‌گویی کمتر از 200 میلی‌ثانیه برای ریدایرکت.
4. **امنیت:** جلوگیری از سوءاستفاده (مانند اسپم یا لینک‌های مخرب).
5. **قابلیت نگهداری:** طراحی ماژولار برای سهولت توسعه و عیب‌یابی.

---

## معماری سطح بالا و اجزای سیستم

### اجزای اصلی
1. **لایه کلاینت (Client Layer):**
   - رابط کاربری (وب یا اپلیکیشن موبایل) و APIها برای تعامل با کاربران.
2. **لایه اپلیکیشن (Application Layer):**
   - سرورهای وب برای پردازش درخواست‌های کوتاه کردن URL و ریدایرکت.
   - مدیریت منطق کسب‌وکار مانند تولید لینک کوتاه و ذخیره‌سازی.
3. **لایه ذخیره‌سازی (Storage Layer):**
   - پایگاه داده برای ذخیره‌سازی جفت‌های URL کوتاه و اصلی.
   - سیستم کش برای بهبود عملکرد.
4. **لایه آنالیتیکس (Analytics Layer):**
   - جمع‌آوری و پردازش داده‌های کلیک برای ارائه آمار.
5. **لایه امنیتی (Security Layer):**
   - مکانیزم‌های احراز هویت و فیلتر کردن لینک‌های مخرب.

### دیاگرام معماری
```
[کلاینت] <--> [Load Balancer] <--> [سرورهای اپلیکیشن]
                                    |        |
                              [کش Redis]  [پایگاه داده NoSQL]
                                    |        |
                                  [آنالیتیکس] [فیلتر امنیتی]
```

---

## مدل‌سازی داده‌ها

### ساختار داده‌ها
1. **جدول URLها:**
   - **کلیدها:** short_url (کلید اصلی)، original_url، user_id، created_at، expires_at، click_count
   - **مثال:**
     ```
     {
       "short_url": "abc123",
       "original_url": "https://example.com/long-url",
       "user_id": "user123",
       "created_at": "2025-07-12T12:00:00Z",
       "expires_at": "2026-07-12T12:00:00Z",
       "click_count": 100
     }
     ```
2. **جدول آنالیتیکس:**
   - **کلیدها:** short_url، timestamp، ip_address، user_agent
   - ذخیره‌سازی برای تحلیل کلیک‌ها و گزارش‌گیری.

### انتخاب پایگاه داده
- **NoSQL (مانند DynamoDB یا MongoDB):**
  - مناسب برای مقیاس‌پذیری افقی و خواندن/نوشتن سریع.
  - پشتیبانی از ساختار داده انعطاف‌پذیر برای لینک‌ها و آنالیتیکس.
- **کش (Redis یا Memcached):**
  - ذخیره جفت‌های short_url و original_url برای دسترسی سریع.
- **SQL (اختیاری):**
  - برای داده‌های رابطه‌ای مانند اطلاعات کاربران یا گزارش‌های پیچیده.

### تولید URL کوتاه
- **روش‌ها:**
  1. **هشینگ (Hashing):** استفاده از الگوریتم‌هایی مانند MD5 یا SHA-1 برای تبدیل URL طولانی به یک رشته کوتاه (مانند 6 کاراکتر).
     - مشکل: احتمال برخورد (Collision).
     - راه‌حل: بررسی وجود کلید در پایگاه داده قبل از ذخیره.
  2. **شمارنده افزایشی (Counter-Based):** استفاده از یک شناسه عددی افزایشی (مانند 1001) و تبدیل آن به Base62 (a-z, A-Z, 0-9).
     - مزیت: تضمین یکتایی URL کوتاه.
     - مثال: 1001 → "abc123" (با تبدیل Base62).
- **طول URL کوتاه:** معمولاً 6 تا 8 کاراکتر برای پشتیبانی از میلیاردها لینک کافی است.

---

## طراحی API و جریان تعامل

### APIهای اصلی
1. **ایجاد URL کوتاه:**
   - **درخواست:** `POST /api/shorten`
   - **بدنه درخواست:**
     ```json
     {
       "original_url": "https://example.com/long-url",
       "custom_alias": "customlink", // اختیاری
       "expires_at": "2026-07-12T12:00:00Z" // اختیاری
     }
     ```
   - **پاسخ:**
     ```json
     {
       "short_url": "https://short.ly/abc123",
       "original_url": "https://example.com/long-url",
       "expires_at": "2026-07-12T12:00:00Z"
     }
     ```
2. **ریدایرکت URL:**
   - **درخواست:** `GET /:short_url`
   - **پاسخ:** ریدایرکت 301 به URL اصلی.
3. **دریافت آنياليتيكس:**
   - **درخواست:** `GET /api/analytics/:short_url`
   - **پاسخ:**
     ```json
     {
       "short_url": "abc123",
       "click_count": 100,
       "last_clicked": "2025-07-12T12:00:00Z"
     }
     ```

### جریان تعامل
1. **ایجاد URL کوتاه:**
   - کاربر URL طولانی را از طریق API یا UI ارسال می‌کند.
   - سرور یک کلید کوتاه تولید می‌کند (با هش یا Base62).
   - جفت URL در پایگاه داده و کش ذخیره می‌شود.
   - URL کوتاه به کاربر بازگردانده می‌شود.
2. **ریدایرکت:**
   - کاربر URL کوتاه را در مرورگر وارد می‌کند.
   - سرور ابتدا کش را بررسی می‌کند؛ اگر یافت نشد، به پایگاه داده مراجعه می‌کند.
   - سرور کاربر را به URL اصلی هدایت می‌کند و کلیک را در آنالیتیکس ثبت می‌کند.

---

## مدیریت چالش‌های مقیاس‌پذیری، قابلیت اطمینان و عملکرد

### مقیاس‌پذیری
- **چالش:** مدیریت میلیون‌ها درخواست در ثانیه و میلیاردها URL.
- **راه‌حل‌ها:**
  - **Load Balancer:** توزیع ترافیک بین سرورهای اپلیکیشن.
  - **کش:** استفاده از Redis برای کاهش بار پایگاه داده.
  - **پایگاه داده مقیاس‌پذیر:** استفاده از NoSQL (مانند DynamoDB) با پارتیشن‌بندی.
  - **مقیاس‌بندی افقی:** افزودن سرورها با Kubernetes یا ECS.

### قابلیت اطمینان
- **چالش:** جلوگیری از قطعی سرویس و از دست رفتن داده‌ها.
- **راه‌حل‌ها:**
  - **افزونگی (Redundancy):** استفاده از چندین منطقه (Region) در سرویس‌های ابری.
  - **پشتیبان‌گیری:** ذخیره‌سازی داده‌ها در چندین Replica.
  - **Failover:** جابجایی خودکار به سرورهای سالم در صورت خرابی.

### عملکرد
- **چالش:** تضمین زمان پاسخ‌گویی پایین (کمتر از 200ms).
- **راه‌حل‌ها:**
  - **کش در حافظه:** ذخیره URLها در Redis برای دسترسی سریع.
  - **CDN:** استفاده از CDN (مانند Cloudflare) برای ریدایرکت سریع‌تر.
  - **بهینه‌سازی پایگاه داده:** استفاده از ایندکس‌ها و پارتیشن‌بندی.

### امنیت
- **چالش:** جلوگیری از لینک‌های مخرب یا سوءاستفاده.
- **راه‌حل‌ها:**
  - **فیلتر URL:** بررسی URLها در برابر لیست سیاه (Blacklist).
  - **احراز هویت:** اجباری کردن ورود کاربر برای ایجاد لینک‌های سفارشی.
  - **محدودیت نرخ (Rate Limiting):** جلوگیری از سوءاستفاده با محدود کردن تعداد درخواست‌ها.

---

## تریدآف‌های طراحی و نحوه مدیریت آن‌ها

1. **هشینگ در مقابل شمارنده افزایشی:**
   - **هشینگ:** سریع اما احتمال برخورد وجود دارد.
   - **شمارنده افزایشی:** یکتا اما نیاز به مدیریت حالت (State) دارد.
   - **تصمیم:** استفاده از Base62 با شمارنده افزایشی برای تضمین یکتایی و سادگی.
2. **کش در مقابل پایگاه داده:**
   - **کش:** سریع اما ممکن است داده از دست برود.
   - **پایگاه داده:** قابل‌اعتماد اما کندتر.
   - **تصمیم:** ترکیب کش برای خواندن سریع و پایگاه داده برای پایداری.
3. **مقیاس‌پذیری در مقابل هزینه:**
   - مقیاس‌پذیری افقی هزینه‌بر است.
   - **تصمیم:** استفاده از سرویس‌های ابری با مقیاس‌بندی خودکار برای تعادل بین هزینه و عملکرد.

---

## فناوری‌ها و الگوهای پیشنهادی

1. **فناوری‌ها:**
   - **سرورهای اپلیکیشن:** Node.js، Spring Boot یا Go برای عملکرد بالا.
   - **پایگاه داده:** DynamoDB، MongoDB یا Cassandra برای مقیاس‌پذیری.
   - **کش:** Redis یا Memcached برای دسترسی سریع.
   - **Load Balancer:** AWS ALB یا Nginx.
   - **CDN:** Cloudflare یا AWS CloudFront.
   - **مانیتورینگ:** Prometheus و Grafana برای نظارت بر متریک‌ها.
2. **الگوهای طراحی:**
   - **CQRS:** جداسازی عملیات خواندن (ریدایرکت) و نوشتن (ایجاد URL).
   - **Event Sourcing:** ثبت کلیک‌ها به‌صورت رویداد برای آنالیتیکس.
   - **Circuit Breaker:** جلوگیری از خرابی‌های زنجیره‌ای در سیستم‌های توزیع‌شده.

---

## انتظارات مصاحبه‌کنندگان در طراحی سیستم

1. **درک نیازمندی‌ها:**
   - ابتدا نیازمندی‌های کارکردی و غیرکارکردی را با مصاحبه‌کننده تأیید کنید.
   - مثال: آیا لینک‌های سفارشی یا آنالیتیکس موردنیاز است؟
2. **ارائه معماری سطح بالا:**
   - دیاگرام ساده‌ای رسم کنید و اجزا (مانند Load Balancer، کش، پایگاه داده) را توضیح دهید.
3. **توجه به NFRها:**
   - توضیح دهید که چگونه مقیاس‌پذیری، عملکرد و امنیت را مدیریت می‌کنید.
   - مثال: استفاده از Redis برای کاهش تأخیر ریدایرکت.
4. **بحث درباره تریدآف‌ها:**
   - نشان دهید که تریدآف‌ها (مانند هزینه در مقابل عملکرد) را درک می‌کنید.
5. **جزئیات پیاده‌سازی:**
   - جزئیات فنی مانند الگوریتم تولید URL یا انتخاب پایگاه داده را توضیح دهید.
6. **مستندسازی و ارتباط:**
   - از اصطلاحات دقیق استفاده کنید و مراحل طراحی را به‌صورت ساختاریافته ارائه دهید.

---

## نمونه‌های واقعی و مطالعات موردی
1. **Bitly:**
   - از معماری میکروسرویس با پایگاه داده‌های NoSQL و کش Redis استفاده می‌کند.
   - برای مقیاس‌پذیری از AWS و برای ریدایرکت سریع از CDN بهره می‌برد.
   - آنالیتیکس پیشرفته برای تحلیل رفتار کاربران ارائه می‌دهد.
2. **TinyURL:**
   - از الگوریتم Base62 برای تولید URLهای کوتاه استفاده می‌کند.
   - پایگاه داده مقیاس‌پذیر برای ذخیره‌سازی و کش برای عملکرد بالا.
3. **Google URL Shortener (goo.gl) - بازنشسته‌شده:**
   - از زیرساخت ابری گوگل برای مقیاس‌پذیری و قابلیت اطمینان بالا استفاده می‌کرد.
   - امنیت قوی با فیلتر کردن لینک‌های مخرب.

---

## خلاصه
طراحی یک سیستم کوتاه‌کننده URL نیازمند توجه به نیازمندی‌های کارکردی (مانند کوتاه کردن و ریدایرکت) و غیرکارکردی (مانند مقیاس‌پذیری و عملکرد) است. معماری باید شامل اجزایی مانند Load Balancer، کش، پایگاه داده مقیاس‌پذیر و سیستم آنالیتیکس باشد. انتخاب فناوری‌های مناسب (مانند Redis و DynamoDB) و الگوهای طراحی (مانند CQRS) به مدیریت چالش‌های مقیاس‌پذیری و عملکرد کمک می‌کند. در مصاحبه‌های طراحی سیستم، توانایی توضیح نیازمندی‌ها، ارائه معماری سطح بالا، بحث درباره تریدآف‌ها و توجه به جزئیات فنی از اهمیت بالایی برخوردار است. با رعایت این اصول، می‌توانید سیستمی مقیاس‌پذیر، قابل‌اعتماد و کارآمد طراحی کنید که نیازهای کاربران را برآورده کند.