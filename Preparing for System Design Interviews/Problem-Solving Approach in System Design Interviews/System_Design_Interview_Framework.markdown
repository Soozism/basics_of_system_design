# چارچوب حل مسئله در مصاحبه‌های طراحی سیستم

## اهمیت شناسایی و درک دقیق نیازمندی‌ها قبل از طراحی سیستم

در مصاحبه‌های طراحی سیستم، توانایی حل مسائل پیچیده و طراحی سیستم‌های مقیاس‌پذیر از مهارت‌های کلیدی است. **شناسایی و درک دقیق نیازمندی‌ها** اولین و مهم‌ترین گام در این فرآیند است، زیرا:

- **تمرکز بر مسئله اصلی**: درک نیازمندی‌ها به شما کمک می‌کند تا روی اهداف اصلی سیستم تمرکز کنید و از گمراه شدن در جزئیات غیرضروری جلوگیری کنید.
- **جلوگیری از ابهام**: بدون نیازمندی‌های مشخص، طراحی ممکن است ناقص یا ناکارآمد باشد.
- **تعیین معیارهای موفقیت**: نیازمندی‌ها مشخص می‌کنند که سیستم باید چه ویژگی‌هایی داشته باشد و چگونه ارزیابی می‌شود.
- **مدیریت انتظارات مصاحبه‌کننده**: نشان دادن توانایی شما در پرسیدن سؤالات روشن‌کننده، مهارت‌های ارتباطی و تفکر تحلیلی شما را برجسته می‌کند.

درک نیازمندی‌ها به شما امکان می‌دهد تا طراحی را به‌گونه‌ای انجام دهید که با اهداف کسب‌وکار و محدودیت‌های فنی هم‌راستا باشد.

---

## تکنیک‌های جمع‌آوری و روشن‌سازی نیازمندی‌های عملکردی و غیرعملکردی

### نیازمندی‌های عملکردی (Functional Requirements)
این نیازمندی‌ها مشخص می‌کنند که سیستم چه کارهایی باید انجام دهد. برای جمع‌آوری آن‌ها:
- **سؤالات روشن‌کننده بپرسید**:
  - سیستم چه خدماتی ارائه می‌دهد؟ (مثلاً ارسال پیام، ذخیره پست، یا پردازش پرداخت)
  - کاربران چه اقداماتی انجام می‌دهند؟ (مثلاً آپلود فایل، جستجو، یا مشاهده محتوا)
  - ورودی‌ها و خروجی‌های سیستم چیست؟
- **مثال**: در طراحی یک سیستم شبکه اجتماعی مانند توییتر، نیازمندی‌های عملکردی ممکن است شامل ارسال توییت، دنبال کردن کاربران، و نمایش فید باشد.

### نیازمندی‌های غیرعملکردی (Non-Functional Requirements)
این نیازمندی‌ها به کیفیت سیستم (مانند مقیاس‌پذیری، عملکرد، و قابلیت اطمینان) مربوط می‌شوند. تکنیک‌های جمع‌آوری:
- **بررسی مقیاس سیستم**:
  - تعداد کاربران روزانه یا درخواست‌ها در ثانیه چقدر است؟
  - حجم داده‌ها (مثلاً تعداد توییت‌ها یا پیام‌ها) چقدر است؟
- **تمرکز بر SLA (Service Level Agreement)**:
  - تأخیر قابل قبول چقدر است؟ (مثلاً 100 میلی‌ثانیه برای پاسخ API)
  - قابلیت اطمینان مورد انتظار چیست؟ (مثلاً 99.9٪ دسترسی‌پذیری)
- **امنیت و حریم خصوصی**:
  - آیا داده‌ها نیاز به رمزنگاری دارند؟
  - چه سطحی از احراز هویت و مجوزدهی مورد نیاز است؟
- **مثال**: برای توییتر، نیازمندی‌های غیرعملکردی ممکن است شامل پشتیبانی از 500 میلیون کاربر فعال روزانه، تأخیر کمتر از 200 میلی‌ثانیه برای بارگذاری فید، و تحمل‌پذیری خطا باشد.

### تکنیک‌های روشن‌سازی
- **روش 5W1H**: از سؤالات چه کسی (Who)، چه چیزی (What)، کجا (Where)، کی (When)، چرا (Why)، و چگونه (How) برای روشن‌سازی استفاده کنید.
- **تعریف سناریوهای کاربری**: سناریوهای واقعی (مانند ارسال پیام توسط کاربر) را با مصاحبه‌کننده بررسی کنید.
- **تکرار و تأیید**: نیازمندی‌ها را خلاصه کرده و با مصاحبه‌کننده تأیید کنید تا اطمینان حاصل شود که درک مشترکی وجود دارد.

---

## تعریف مؤثر APIها برای مشخص کردن مرزها و تعاملات سیستم

تعریف **APIها** به روشن شدن تعاملات بین اجزای سیستم و کاربران کمک می‌کند. APIها مرزهای سیستم را مشخص کرده و به‌عنوان قرارداد بین سرویس‌ها عمل می‌کنند.

### مراحل تعریف APIها
1. **شناسایی عملیات اصلی**:
   - عملیات‌های CRUD (ایجاد، خواندن، به‌روزرسانی، حذف) را بر اساس نیازمندی‌های عملکردی تعریف کنید.
   - مثال: برای یک سیستم پیام‌رسانی، APIهایی مانند `sendMessage`، `getMessages`، و `deleteMessage` تعریف می‌شوند.
2. **طراحی RESTful یا GraphQL**:
   - برای REST، از مسیرهای معنادار (مانند `/users/{id}/messages`) و روش‌های HTTP (GET، POST، PUT، DELETE) استفاده کنید.
   - برای GraphQL، از یک طرح‌واره (Schema) برای تعریف نوع داده‌ها و پرس‌وجوها استفاده کنید.
   - مثال: `POST /messages` برای ارسال پیام با بدنه `{ "userId": "123", "content": "Hello!" }`.
3. **مشخص کردن ورودی‌ها و خروجی‌ها**:
   - پارامترهای ورودی، پاسخ‌های موفق، و خطاها را مشخص کنید.
   - مثال: برای `getMessages`، ورودی ممکن است شامل `userId` و `timestamp` باشد و خروجی لیستی از پیام‌ها با فرمت JSON.
4. **توجه به مقیاس‌پذیری و امنیت**:
   - از احراز هویت (مانند OAuth 2.0 یا JWT) برای ایمن کردن APIها استفاده کنید.
   - از محدود کردن نرخ (Rate Limiting) برای جلوگیری از سوءاستفاده اطمینان حاصل کنید.

### مثال
برای طراحی یک سیستم مشابه URL Shortener:
- **API**: `POST /shorten` (ورودی: URL اصلی، خروجی: URL کوتاه‌شده)
- **API**: `GET /{shortUrl}` (ورودی: کد URL کوتاه، خروجی: ریدایرکت به URL اصلی)
- این APIها تعاملات کاربر با سیستم را به‌وضوح تعریف می‌کنند.

---

## مراحل طراحی معماری سیستم بر اساس نیازمندی‌ها و APIها

1. **طراحی سطح بالا (High-Level Design)**:
   - اجزای اصلی سیستم (مانند کلاینت، سرور، پایگاه داده، ذخیره‌سازی کش) را شناسایی کنید.
   - یک نمودار ساده برای نمایش تعاملات بین اجزا رسم کنید.
   - مثال: برای توییتر، اجزا شامل سرورهای وب، پایگاه داده برای ذخیره توییت‌ها، و سیستم کش مانند Redis است.

2. **انتخاب فناوری‌ها**:
   - بر اساس نیازمندی‌های غیرعملکردی، فناوری‌های مناسب را انتخاب کنید:
     - **پایگاه داده**: برای داده‌های رابطه‌ای (MySQL)، غیررابطه‌ای (Cassandra)، یا گرافی (Neo4j).
     - **ذخیره‌سازی کش**: Redis یا Memcached برای کاهش تأخیر.
     - **پیام‌رسانی**: Apache Kafka برای پردازش جریانی.
   - مثال: برای یک سیستم چت، از Cassandra برای ذخیره پیام‌ها و Kafka برای صف پیام‌ها استفاده کنید.

3. **طراحی جزئیات (Low-Level Design)**:
   - معماری میکروسرویس یا مونولیتیک را مشخص کنید.
   - برای هر API، جریان داده و اجزای دخیل را توضیح دهید.
   - مثال: برای API `sendMessage`، داده از سرور وب به Kafka، سپس به پایگاه داده منتقل می‌شود.

4. **توجه به مقیاس‌پذیری و تحمل‌پذیری خطا**:
   - از متعادل‌کننده بار (Load Balancer) برای توزیع ترافیک استفاده کنید.
   - از تکثیر داده‌ها و افزونگی برای تحمل‌پذیری خطا اطمینان حاصل کنید.
   - مثال: استفاده از چندین نمونه سرور و پایگاه داده در مناطق مختلف.

5. **پیاده‌سازی و اعتبارسنجی**:
   - طراحی را با مصاحبه‌کننده بررسی کنید و اطمینان حاصل کنید که نیازمندی‌ها را برآورده می‌کند.
   - از معیارهای SLA (مانند تأخیر یا دسترسی‌پذیری) برای اعتبارسنجی استفاده کنید.

---

## نکات برای متعادل کردن مصالحه‌ها در طراحی

در طراحی سیستم، مصالحه‌های مختلفی بین مقیاس‌پذیری، قابلیت اطمینان، و پیچیدگی وجود دارد:
- **مقیاس‌پذیری در برابر پیچیدگی**:
  - راه‌حل‌های ساده (مانند معماری مونولیتیک) برای سیستم‌های کوچک مناسب هستند، اما برای مقیاس بزرگ، معماری میکروسرویس مقیاس‌پذیرتر است، هرچند پیچیدگی را افزایش می‌دهد.
  - مثال: برای یک سیستم کوچک، یک پایگاه داده MySQL کافی است، اما برای مقیاس بزرگ، Cassandra مقیاس‌پذیرتر است.
- **قابلیت اطمینان در برابر هزینه**:
  - افزونگی و تکثیر داده‌ها قابلیت اطمینان را افزایش می‌دهند، اما هزینه‌های زیرساختی را بالا می‌برند.
  - مثال: استفاده از چندین منطقه AWS برای افزونگی، هزینه را افزایش می‌دهد.
- **عملکرد در برابر انعطاف‌پذیری**:
  - ذخیره‌سازی کش (مانند Redis) تأخیر را کاهش می‌دهد، اما ممکن است پیچیدگی مدیریت داده را افزایش دهد.
  - مثال: استفاده از Redis برای کش فید توییتر، سرعت را بهبود می‌بخشد اما نیاز به همگام‌سازی دارد.
- **نکات**:
  - مصالحه‌ها را به صراحت با مصاحبه‌کننده بحث کنید.
  - از داده‌های نیازمندی‌ها (مانند تعداد کاربران یا نرخ درخواست‌ها) برای توجیه انتخاب‌ها استفاده کنید.

---

## تله‌های رایج در رویکرد حل مسئله

1. **عجله در طراحی بدون روشن‌سازی نیازمندی‌ها**:
   - تله: شروع طراحی قبل از درک کامل مشکل.
   - راه‌حل: زمان کافی برای پرسیدن سؤالات روشن‌کننده اختصاص دهید.
2. **تمرکز بیش‌ازحد روی جزئیات**:
   - تله: غرق شدن در پیاده‌سازی‌های سطح پایین (مانند کد) به‌جای طراحی سطح بالا.
   - راه‌حل: روی معماری کلی تمرکز کنید و فقط در صورت درخواست مصاحبه‌کننده وارد جزئیات شوید.
3. **نادیده گرفتن نیازمندی‌های غیرعملکردی**:
   - تله: طراحی سیستمی که مقیاس‌پذیر یا قابل اعتماد نیست.
   - راه‌حل: همیشه مقیاس‌پذیری، تأخیر، و تحمل‌پذیری خطا را در نظر بگیرید.
4. **عدم توضیح مصالحه‌ها**:
   - تله: انتخاب یک فناوری یا طراحی بدون توضیح دلیل.
   - راه‌حل: مزایا و معایب هر انتخاب را به مصاحبه‌کننده توضیح دهید.
5. **فرض‌های نادرست**:
   - تله: فرض کردن نیازمندی‌هایی که مصاحبه‌کننده ذکر نکرده است.
   - راه‌حل: فرض‌ها را با مصاحبه‌کننده تأیید کنید.

---

## نمونه‌هایی از کاربرد چارچوب در سؤالات مصاحبه طراحی سیستم

### 1. طراحی یک سیستم کوتاه‌کننده URL
- **نیازمندی‌ها**:
  - **عملکردی**: کوتاه کردن URL، ریدایرکت به URL اصلی.
  - **غیرعملکردی**: پشتیبانی از 1 میلیون درخواست روزانه، تأخیر کمتر از 100 میلی‌ثانیه، دسترسی‌پذیری 99.9٪.
- **APIها**:
  - `POST /shorten` (ورودی: URL اصلی، خروجی: URL کوتاه).
  - `GET /{shortUrl}` (خروجی: ریدایرکت به URL اصلی).
- **معماری**:
  - **سرور وب**: برای مدیریت درخواست‌های API.
  - **پایگاه داده**: مانند Cassandra برای ذخیره جفت‌های URL کوتاه و اصلی.
  - **کش**: Redis برای کاهش تأخیر در ریدایرکت‌ها.
  - **متعادل‌کننده بار**: برای توزیع ترافیک.
- **مصالحه‌ها**:
  - استفاده از Cassandra برای مقیاس‌پذیری در برابر MySQL برای سادگی.
  - ذخیره‌سازی کش برای عملکرد در برابر پیچیدگی همگام‌سازی.

### 2. طراحی یک سیستم پیام‌رسانی مانند WhatsApp
- **نیازمندی‌ها**:
  - **عملکردی**: ارسال و دریافت پیام، پشتیبانی از چت گروهی.
  - **غیرعملکردی**: پشتیبانی از 1 میلیارد کاربر، تأخیر کمتر از 200 میلی‌ثانیه، تحمل‌پذیری خطا.
- **APIها**:
  - `POST /messages/send` (ورودی: پیام، گیرنده، خروجی: تأیید ارسال).
  - `GET /messages/{userId}` (خروجی: لیست پیام‌ها).
- **معماری**:
  - **سرورهای وب**: برای مدیریت APIها.
  - **صف پیام**: Apache Kafka برای پردازش جریانی پیام‌ها.
  - **پایگاه داده**: HBase یا Cassandra برای ذخیره پیام‌ها.
  - **پروتکل**: WebSocket برای ارتباط بلادرنگ.
- **مصالحه‌ها**:
  - استفاده از WebSocket برای تأخیر کم در برابر پیچیدگی پیاده‌سازی.
  - انتخاب HBase برای مقیاس‌پذیری در برابر SQL برای سادگی.

---

## خلاصه و نکات کلیدی

چارچوب حل مسئله در مصاحبه‌های طراحی سیستم شامل مراحل زیر است:
1. **درک نیازمندی‌ها**: با پرسیدن سؤالات روشن‌کننده، نیازمندی‌های عملکردی و غیرعملکردی را مشخص کنید.
2. **تعریف APIها**: APIهای واضح و استاندارد برای تعیین تعاملات سیستم طراحی کنید.
3. **طراحی معماری**: از طراحی سطح بالا شروع کنید، فناوری‌ها را انتخاب کنید، و جزئیات را بر اساس نیاز گسترش دهید.
4. **مدیریت مصالحه‌ها**: بین مقیاس‌پذیری، قابلیت اطمینان، و پیچیدگی تعادل برقرار کنید و انتخاب‌ها را توجیه کنید.
5. **اجتناب از تله‌ها**: از عجله، فرض‌های نادرست، و نادیده گرفتن نیازمندی‌های غیرعملکردی پرهیز کنید.

این چارچوب به مهندسان نرم‌افزار کمک می‌کند تا در مصاحبه‌های طراحی سیستم به‌صورت ساختاریافته و حرفه‌ای عمل کنند. با تمرین این مراحل در سؤالات نمونه مانند طراحی URL Shortener یا سیستم پیام‌رسانی، مهندسان می‌توانند توانایی خود را در طراحی سیستم‌های مقیاس‌پذیر و قابل اعتماد نشان دهند. این رویکرد نه‌تنها در مصاحبه‌ها، بلکه در طراحی سیستم‌های واقعی نیز کاربرد دارد و به ایجاد راه‌حل‌های کارآمد و کاربرمحور کمک می‌کند.