# مدیریت داده‌ها: سازگاری در مقابل دسترسی‌پذیری (قضیه CAP)

این سند به بررسی مفاهیم سازگاری (Consistency) و دسترسی‌پذیری (Availability) در سیستم‌های توزیع‌شده با تمرکز بر **قضیه CAP** می‌پردازد. هدف این است که با ارائه تعاریف، توضیح قضیه، مثال‌های عملی، تریدآف‌ها، دیاگرام‌ها و منابع پیشنهادی، یک راهنمای جامع و آموزشی برای یادگیری عمیق فراهم شود. این محتوا به زبان فارسی و با فرمت مارک‌داون ارائه شده است تا برای مستندسازی آموزشی و یادگیری اصول طراحی سیستم مناسب باشد.

---

## مقدمه: سازگاری و دسترسی‌پذیری در سیستم‌های توزیع‌شده چیست؟

در سیستم‌های توزیع‌شده، که داده‌ها و پردازش‌ها بین چندین سرور یا گره (Node) تقسیم می‌شوند، دو ویژگی کلیدی برای مدیریت داده‌ها وجود دارد:

- **سازگاری (Consistency):** به این معناست که تمام گره‌های سیستم در هر لحظه داده‌های یکسانی را ارائه می‌دهند. به عبارت دیگر، هر خواندن از سیستم باید آخرین نسخه داده‌ها را بازگرداند.
  - **مثال:** در یک سیستم بانکی، موجودی حساب کاربر باید در همه سرورها یکسان باشد.
- **دسترسی‌پذیری (Availability):** به این معناست که سیستم همیشه به درخواست‌های کاربران پاسخ می‌دهد، حتی در صورت بروز خطا یا خرابی در برخی گره‌ها.
  - **مثال:** یک وب‌سایت تجارت الکترونیک باید حتی در صورت خرابی یک سرور، همچنان در دسترس باشد.

این دو ویژگی در سیستم‌های مقیاس بزرگ (مانند پایگاه‌های داده توزیع‌شده یا پلتفرم‌های وب) حیاتی هستند، اما دستیابی به هر دو به‌طور همزمان چالش‌برانگیز است. **قضیه CAP** چارچوبی برای درک این چالش و انتخاب بین سازگاری و دسترسی‌پذیری ارائه می‌دهد.

---

## قضیه CAP چیست؟ توضیح کامل سازگاری، دسترسی‌پذیری و تحمل تقسیم‌بندی

**قضیه CAP** (Consistency, Availability, Partition Tolerance) که توسط اریک بروئر (Eric Brewer) در سال 2000 مطرح شد و بعداً توسط دیگران اثبات شد، بیان می‌کند که یک سیستم توزیع‌شده نمی‌تواند به‌طور همزمان هر سه ویژگی زیر را به‌طور کامل تضمین کند:

1. **سازگاری (Consistency):**
   - هر عملیات خواندن از سیستم آخرین نسخه داده‌های نوشته‌شده را بازمی‌گرداند (یا خطا می‌دهد).
   - **مثال:** اگر کاربری موجودی حساب خود را به‌روزرسانی کند، تمام خواندن‌های بعدی باید مقدار جدید را نشان دهند.
   - **انواع سازگاری:**
     - **سازگاری قوی (Strong Consistency):** تمام گره‌ها در لحظه یکسان داده‌های یکسانی دارند.
     - **سازگاری نهایی (Eventual Consistency):** گره‌ها ممکن است موقتاً داده‌های متفاوتی داشته باشند، اما در نهایت به همگرایی می‌رسند.

2. **دسترسی‌پذیری (Availability):**
   - هر درخواست (خواندن یا نوشتن) به یک گره غیرخراب در سیستم، همیشه پاسخی دریافت می‌کند (بدون تضمین اینکه پاسخ شامل آخرین داده‌ها باشد).
   - **مثال:** حتی اگر برخی سرورها از کار بیفتند، سیستم همچنان به درخواست‌ها پاسخ می‌دهد.

3. **تحمل تقسیم‌بندی (Partition Tolerance):**
   - سیستم حتی در صورت بروز **تقسیم‌بندی شبکه** (Network Partition)، که در آن ارتباط بین برخی گره‌ها قطع می‌شود، به کار خود ادامه می‌دهد.
   - **مثال:** اگر ارتباط بین دو مرکز داده قطع شود، سیستم باید بتواند به‌طور مستقل در هر بخش عمل کند.
   - در سیستم‌های توزیع‌شده، تقسیم‌بندی شبکه به دلیل خرابی‌های شبکه اجتناب‌ناپذیر است، بنابراین تحمل تقسیم‌بندی معمولاً الزامی است.

---

## تعریف رسمی قضیه CAP و پیامدهای آن

**تعریف رسمی:** قضیه CAP بیان می‌کند که در یک سیستم توزیع‌شده که با تقسیم‌بندی شبکه مواجه است، تنها می‌توان **دو ویژگی از سه ویژگی سازگاری، دسترسی‌پذیری و تحمل تقسیم‌بندی** را به‌طور همزمان تضمین کرد. به عبارت دیگر، سیستم باید بین یکی از ترکیب‌های زیر انتخاب کند:
- **CP (سازگار و تحمل تقسیم‌بندی):** سیستم داده‌های سازگار ارائه می‌دهد، اما ممکن است در زمان تقسیم‌بندی شبکه، دسترسی‌پذیری را از دست بدهد.
- **AP (دسترسی‌پذیر و تحمل تقسیم‌بندی):** سیستم همیشه در دسترس است، اما ممکن است داده‌های ناسازگار ارائه دهد.
- **CA (سازگار و دسترسی‌پذیر):** سیستم داده‌های سازگار ارائه می‌دهد و همیشه در دسترس است، اما تنها در محیط‌هایی که تقسیم‌بندی شبکه وجود ندارد (که در سیستم‌های توزیع‌شده واقعی نادر است).

**پیامدها:**
- در دنیای واقعی، تقسیم‌بندی شبکه (مانند قطعی ارتباط بین سرورها) اجتناب‌ناپذیر است، بنابراین سیستم‌ها باید تحمل تقسیم‌بندی (P) را بپذیرند.
- این به این معناست که طراحی سیستم باید بین **سازگاری (C)** و **دسترسی‌پذیری (A)** تریدآف کند.
- انتخاب بین CP یا AP به نیازهای برنامه و مورد استفاده (Use Case) بستگی دارد.

---

## چرا هر سه ویژگی (C، A، P) نمی‌توانند به‌طور همزمان محقق شوند؟

در یک سیستم توزیع‌شده، زمانی که تقسیم‌بندی شبکه رخ می‌دهد (یعنی برخی گره‌ها نمی‌توانند با یکدیگر ارتباط برقرار کنند)، سیستم باید یکی از دو تصمیم زیر را بگیرد:
1. **توقف پاسخ‌گویی برای حفظ سازگاری (CP):** سیستم درخواست‌ها را تا زمانی که داده‌ها در همه گره‌ها همگام شوند، رد می‌کند. این کار دسترسی‌پذیری را کاهش می‌دهد.
2. **ادامه پاسخ‌گویی با داده‌های ناسازگار (AP):** سیستم به درخواست‌ها پاسخ می‌دهد، حتی اگر داده‌ها در گره‌های مختلف متفاوت باشند. این کار سازگاری را قربانی می‌کند.

**مثال ساده:**
- فرض کنید یک سیستم بانکی با دو سرور (A و B) دارید. کاربری 100 دلار از حساب خود برداشت می‌کند و این تغییر در سرور A ثبت می‌شود، اما به دلیل تقسیم‌بندی شبکه، سرور B هنوز موجودی قدیمی را نشان می‌دهد.
  - **CP:** سیستم درخواست‌های خواندن از سرور B را رد می‌کند تا از ارائه داده‌های ناسازگار جلوگیری کند (کاهش دسترسی‌پذیری).
  - **AP:** سیستم به سرور B اجازه می‌دهد موجودی قدیمی را نشان دهد (کاهش سازگاری).

چون نمی‌توان از تقسیم‌بندی شبکه جلوگیری کرد، دستیابی به هر سه ویژگی به‌طور همزمان غیرممکن است.

---

## مثال‌های عملی از سیستم‌هایی با اولویت‌های مختلف

### ۱. سیستم‌های CP (سازگار و تحمل تقسیم‌بندی)
- **ویژگی‌ها:** اولویت با ارائه داده‌های سازگار است، حتی اگر به معنای کاهش دسترسی‌پذیری در زمان تقسیم‌بندی باشد.
- **مثال‌ها:**
  - **MongoDB (در حالت پیش‌فرض):** در تنظیمات با Write Concern بالا، MongoDB سازگاری قوی را تضمین می‌کند، اما ممکن است در زمان تقسیم‌بندی، درخواست‌ها را رد کند.
  - **HBase:** پایگاه داده‌ای که برای سازگاری قوی طراحی شده و در صورت تقسیم‌بندی، دسترسی‌پذیری را قربانی می‌کند.
- **مورد استفاده:** سیستم‌های مالی (مانند بانکداری) که نیاز به داده‌های کاملاً سازگار دارند.

### ۲. سیستم‌های AP (دسترسی‌پذیر و تحمل تقسیم‌بندی)
- **ویژگی‌ها:** اولویت با دسترسی‌پذیری است، حتی اگر به معنای ارائه داده‌های ناسازگار موقت باشد (معمولاً با سازگاری نهایی).
- **مثال‌ها:**
  - **Amazon DynamoDB:** پایگاه داده NoSQL که دسترسی‌پذیری بالا و سازگاری نهایی را ارائه می‌دهد.
  - **Cassandra:** پایگاه داده‌ای که برای دسترسی‌پذیری بالا طراحی شده و از سازگاری نهایی پشتیبانی می‌کند.
- **مورد استفاده:** شبکه‌های اجتماعی، فروشگاه‌های آنلاین یا سیستم‌های تحمل‌پذیر خطا که داده‌های ناسازگار موقت قابل قبول هستند.

### ۳. سیستم‌های CA (سازگار و دسترسی‌پذیر)
- **ویژگی‌ها:** این سیستم‌ها در محیط‌هایی که تقسیم‌بندی شبکه وجود ندارد (مانند سیستم‌های تک‌سروری یا شبکه‌های محلی قابل اعتماد) کار می‌کنند.
- **مثال‌ها:**
  - **پایگاه‌های داده رابطه‌ای سنتی (مانند MySQL یا PostgreSQL):** در حالت تک‌سروری، این پایگاه‌ها سازگاری و دسترسی‌پذیری را ارائه می‌دهند.
  - **سیستم‌های محلی:** مانند سیستم‌های مدیریت موجودی در یک فروشگاه کوچک.
- **مورد استفاده:** برنامه‌هایی که در محیط‌های بدون تقسیم‌بندی شبکه اجرا می‌شوند (نادر در سیستم‌های توزیع‌شده واقعی).

---

## تریدآف‌های واقعی که توسعه‌دهندگان در طراحی سیستم‌های توزیع‌شده باید در نظر بگیرند

1. **سازگاری در مقابل تجربه کاربری:**
   - سیستم‌های CP ممکن است در زمان تقسیم‌بندی شبکه، درخواست‌ها را رد کنند، که می‌تواند تجربه کاربری را مختل کند.
   - سیستم‌های AP ممکن است داده‌های ناسازگار ارائه دهند، که در برخی موارد (مانند موجودی حساب بانکی) غیرقابل قبول است.
   - **مثال:** در آمازون، سبد خرید کاربران ممکن است موقتاً ناسازگار باشد (AP)، اما سیستم بانکی باید همیشه سازگار باشد (CP).

2. **پیچیدگی طراحی:**
   - سیستم‌های CP نیاز به مکانیزم‌های هماهنگی پیچیده (مانند پروتکل‌های اجماع) دارند.
   - سیستم‌های AP ساده‌تر هستند، اما نیاز به مدیریت ناسازگاری‌های موقت دارند.

3. **هزینه و کارایی:**
   - سیستم‌های CP معمولاً تأخیر بیشتری دارند، زیرا نیاز به همگام‌سازی داده‌ها در گره‌ها دارند.
   - سیستم‌های AP کارایی بهتری دارند، اما ممکن است نیاز به ابزارهای اضافی برای مدیریت سازگاری نهایی داشته باشند.

4. **نیازهای تجاری:**
   - در برخی موارد، دسترسی‌پذیری (مانند وب‌سایت‌های تجارت الکترونیک) مهم‌تر از سازگاری است.
   - در موارد دیگر، سازگاری (مانند سیستم‌های مالی) حیاتی‌تر است.

---

## چگونه بین سازگاری و دسترسی‌پذیری انتخاب کنیم؟

انتخاب بین سازگاری و دسترسی‌پذیری به مورد استفاده و نیازهای برنامه بستگی دارد:

1. **مواردی که سازگاری اولویت دارد (CP):**
   - **سیستم‌های مالی:** مانند تراکنش‌های بانکی که داده‌های ناسازگار می‌توانند به خسارات مالی منجر شوند.
   - **سیستم‌های رزرو:** مانند رزرو بلیط هواپیما که نباید دو نفر یک صندلی را رزرو کنند.
   - **مثال فناوری:** MongoDB با تنظیمات Write Concern بالا، یا Spanner گوگل.

2. **مواردی که دسترسی‌پذیری اولویت دارد (AP):**
   - **شبکه‌های اجتماعی:** مانند فیسبوک یا توییتر، که ناسازگاری موقت (مانند تأخیر در نمایش پست‌ها) قابل قبول است.
   - **فروشگاه‌های آنلاین:** مانند آمازون، که دسترسی‌پذیری سبد خرید مهم‌تر از سازگاری لحظه‌ای است.
   - **مثال فناوری:** Cassandra، DynamoDB.

3. **موارد ترکیبی:**
   - برخی سیستم‌ها از تنظیمات ترکیبی استفاده می‌کنند (مانند DynamoDB با گزینه‌های سازگاری قوی برای برخی عملیات).
   - **مثال:** یک سیستم تجارت الکترونیک ممکن است برای سبد خرید از AP و برای پرداخت از CP استفاده کند.

**نکته کلیدی:** توسعه‌دهندگان باید نیازهای برنامه (مانند تحمل ناسازگاری یا نیاز به دسترسی‌پذیری بالا) را تحلیل کرده و معماری مناسب را انتخاب کنند.

---

## دیاگرام‌ها و جداول

### دیاگرام مثلث CAP

```
       C (سازگاری)
      / \
     /   \
    /     \
   A-------P
(دسترسی‌پذیری) (تحمل تقسیم‌بندی)
```

**توضیح:**
- مثلث CAP نشان می‌دهد که یک سیستم توزیع‌شده تنها می‌تواند دو ضلع از سه ضلع را انتخاب کند.
- در دنیای واقعی، P (تحمل تقسیم‌بندی) اجتناب‌ناپذیر است، بنابراین انتخاب بین C و A انجام می‌شود.

### جدول مقایسه سیستم‌های CP، AP و CA

| **نوع سیستم** | **ویژگی‌ها**                                                                 | **مثال‌ها**                     | **موارد استفاده**                       |
|---------------|------------------------------------------------------------------------------|---------------------------------|-----------------------------------------|
| **CP**        | سازگاری قوی، کاهش دسترسی‌پذیری در زمان تقسیم‌بندی                          | MongoDB، HBase، Spanner        | سیستم‌های مالی، رزرو                    |
| **AP**        | دسترسی‌پذیری بالا، سازگاری نهایی یا ناسازگاری موقت                        | DynamoDB، Cassandra             | شبکه‌های اجتماعی، فروشگاه‌های آنلاین   |
| **CA**        | سازگاری و دسترسی‌پذیری بالا، اما تنها بدون تقسیم‌بندی شبکه                 | MySQL (تک‌سروری)، PostgreSQL   | سیستم‌های محلی، غیرتوزیع‌شده           |

---

## خلاصه و بهترین روش‌ها برای اعمال قضیه CAP در طراحی سیستم

- **قضیه CAP** چارچوبی برای درک تریدآف‌ها بین سازگاری، دسترسی‌پذیری و تحمل تقسیم‌بندی در سیستم‌های توزیع‌شده ارائه می‌دهد.
- **پیامد کلیدی:** در سیستم‌های توزیع‌شده واقعی، تقسیم‌بندی شبکه اجتناب‌ناپذیر است، بنابراین باید بین سازگاری (C) و دسترسی‌پذیری (A) انتخاب کرد.
- **بهترین روش‌ها:**
  - **تحلیل نیازهای برنامه:** مشخص کنید که آیا سازگاری (مانند سیستم‌های مالی) یا دسترسی‌پذیری (مانند شبکه‌های اجتماعی) اولویت دارد.
  - **انتخاب فناوری مناسب:** از پایگاه‌های داده‌ای مانند DynamoDB برای AP یا Spanner برای CP استفاده کنید.
  - **مدیریت ناسازگاری:** در سیستم‌های AP، از مکانیزم‌هایی مانند CRDT (Conflict-Free Replicated Data Types) برای مدیریت سازگاری نهایی استفاده کنید.
  - **مانیتورینگ و تست:** از ابزارهایی مانند Chaos Monkey برای تست تحمل تقسیم‌بندی استفاده کنید.
  - **طراحی ترکیبی:** برای برخی عملیات حیاتی از CP و برای عملیات غیرحیاتی از AP استفاده کنید.
- **درس کلیدی:** قضیه CAP به توسعه‌دهندگان کمک می‌کند تا با درک تریدآف‌ها، سیستم‌هایی طراحی کنند که با نیازهای برنامه هم‌راستا باشند.

---

## منابع پیشنهادی برای مطالعه بیشتر

1. *Designing Data-Intensive Applications* نوشته مارتین کلپمن: کتابی جامع برای یادگیری قضیه CAP و طراحی سیستم‌های توزیع‌شده.
2. *The System Design Primer* (منبع متن‌باز در GitHub): راهنمایی برای درک CAP و معماری‌های توزیع‌شده.
3. وبلاگ‌های مهندسی:
   - *AWS Architecture Blog*: مقالات در مورد DynamoDB و مدیریت تریدآف‌های CAP.
   - *Netflix Tech Blog*: توضیحات در مورد استفاده از Cassandra و AP.
   - *Google Cloud Blog*: مقالات در مورد Spanner و سازگاری قوی.
4. دوره‌های آنلاین:
   - *Grokking the System Design Interview* در DesignGuru.io
   - *System Design Course* در Educative.io
5. مقالات اصلی:
   - "Brewer’s Conjecture and the Feasibility of Consistent, Available, Partition-Tolerant Web Services" توسط اریک بروئر.

---

این سند مفهوم سازگاری، دسترسی‌پذیری و قضیه CAP را به‌صورت جامع توضیح می‌دهد و برای مستندسازی آموزشی و یادگیری طراحی سیستم مناسب است. در صورت نیاز به توضیحات عمیق‌تر یا مثال‌های بیشتر، لطفاً اطلاع دهید!