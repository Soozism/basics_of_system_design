# مروری بر معماری‌های دنیای واقعی (مانند فیسبوک، توییتر و آمازون)

این سند به بررسی معماری سیستم‌های مقیاس بزرگ در شرکت‌های فناوری پیشرو مانند فیسبوک، توییتر و آمازون می‌پردازد. هدف این است که با تحلیل معماری‌های واقعی، درک عمیقی از طراحی سیستم‌های مقیاس‌پذیر، قابل اعتماد و کارآمد ارائه شود. این محتوا برای خوانندگان فنی که می‌خواهند چگونگی ساخت سیستم‌های عظیم را درک کنند، مناسب است. تمام محتوا به زبان فارسی و با فرمت مارک‌داون ارائه شده است تا برای مستندسازی و مطالعه عمیق مناسب باشد.

---

## مقدمه: چرا مطالعه معماری‌های دنیای واقعی اهمیت دارد؟

مطالعه معماری‌های سیستم‌های شرکت‌های بزرگ مانند فیسبوک، توییتر و آمازون برای مهندسان نرم‌افزار ارزشمند است، زیرا:

1. **درک مقیاس‌پذیری در عمل:** این سیستم‌ها برای پشتیبانی از میلیون‌ها یا میلیاردها کاربر طراحی شده‌اند و راه‌حل‌های عملی برای چالش‌های مقیاس‌پذیری ارائه می‌دهند.
2. **یادگیری از تصمیمات واقعی:** بررسی تریدآف‌ها و انتخاب‌های معماری این شرکت‌ها به مهندسان کمک می‌کند تا تصمیم‌گیری‌های بهتری در پروژه‌های خود انجام دهند.
3. **آمادگی برای مصاحبه‌های شغلی:** در مصاحبه‌های طراحی سیستم، توانایی تحلیل معماری‌های واقعی و توضیح تریدآف‌ها بسیار مهم است.
4. **الهام برای طراحی سیستم:** معماری‌های این شرکت‌ها الگوها و ابزارهای مدرنی را معرفی می‌کنند که می‌توانند در پروژه‌های دیگر اعمال شوند.

این سند معماری‌های فیسبوک، توییتر و آمازون را با تمرکز بر مقیاس‌پذیری، قابلیت اطمینان و کارایی بررسی می‌کند و درس‌هایی برای طراحی سیستم ارائه می‌دهد.

---

## مروری کلی بر طراحی سیستم‌های مقیاس بزرگ

سیستم‌های مقیاس بزرگ معمولاً از معماری‌های توزیع‌شده استفاده می‌کنند که شامل اجزای متعددی مانند سرورهای وب، پایگاه‌های داده، سیستم‌های کش، صف‌های پیام و تعادل‌کننده‌های بار هستند. ویژگی‌های کلیدی این سیستم‌ها عبارتند از:

- **معماری توزیع‌شده:** اجزا در سرورهای متعدد توزیع می‌شوند تا بار کاری تقسیم شود.
- **مقیاس‌پذیری افقی:** افزودن سرورهای بیشتر برای مدیریت افزایش بار.
- **تحمل خطا:** استفاده از افزونگی و تکرار داده‌ها برای جلوگیری از خرابی.
- **کارایی بالا:** بهینه‌سازی با استفاده از کشینگ، ایندکس‌گذاری و پردازش بلادرنگ.
- **سرویس‌های کوچک (Microservices):** تقسیم سیستم به سرویس‌های مستقل برای انعطاف‌پذیری و نگهداری آسان‌تر.

این سیستم‌ها معمولاً از ابزارهای مدرن مانند پایگاه‌های داده NoSQL، سیستم‌های پیام‌رسانی (مانند Kafka) و فناوری‌های ابری (مانند AWS) استفاده می‌کنند.

---

## نمونه‌های معماری دنیای واقعی

### ۱. فیسبوک: سیستم نیوزفید (News Feed)
**مروری کلی:**
سیستم نیوزفید فیسبوک پست‌های کاربران و صفحات را به‌صورت بلادرنگ برای میلیون‌ها کاربر نمایش می‌دهد. این سیستم باید مقیاس‌پذیر، سریع و قابل اعتماد باشد.

**اجزای اصلی:**
- **ذخیره‌سازی پست‌ها:** از پایگاه داده‌ای مانند Cassandra یا HBase برای ذخیره‌سازی پست‌ها استفاده می‌شود.
- **کشینگ:** Memcached برای ذخیره‌سازی تایم‌لاین‌های کاربران و کاهش بار پایگاه داده.
- **Graph API:** برای مدیریت روابط بین کاربران (مانند دوستان و فالوورها) و دریافت داده‌های مرتبط.
- **رتبه‌بندی (Ranking):** الگوریتم‌های یادگیری ماشین برای رتبه‌بندی پست‌ها بر اساس علاقه کاربران.
- **صف‌های پیام:** از Apache Kafka برای پردازش رویدادهای بلادرنگ مانند ارسال پست جدید استفاده می‌شود.

**دیاگرام معماری:**
```
[کاربر] --> [تعادل‌کننده بار (NGINX)] --> [سرورهای وب]
                                    |
                                    v
                               [کش (Memcached)]
                                    |
                                    v
                            [صف پیام (Kafka)]
                                    |
                                    v
                         [پایگاه داده (Cassandra)]
                                    |
                                    v
                       [سرویس رتبه‌بندی (ML)]
```

**تصمیمات و تریدآف‌ها:**
- **کشینگ گسترده:** فیسبوک از Memcached برای ذخیره‌سازی تایم‌لاین‌های کاربران استفاده می‌کند تا تأخیر را کاهش دهد، اما این کار هزینه‌های زیرساختی را افزایش می‌دهد.
- **مدل Push در مقابل Pull:** فیسبوک از مدل Push برای کاربران عادی و Pull برای کاربران با تعداد زیاد فالوور (مانند سلبریتی‌ها) استفاده می‌کند تا بار سرور را متعادل کند.
- **سازگاری در مقابل دسترسی‌پذیری:** فیسبوک دسترسی‌پذیری را به سازگاری ترجیح می‌دهد (بر اساس قضیه CAP)، بنابراین ممکن است پست‌های قدیمی‌تر موقتاً نمایش داده شوند.

**مقیاس‌پذیری، قابلیت اطمینان، و کارایی:**
- **مقیاس‌پذیری:** شاردینگ داده‌ها در Cassandra و استفاده از تعادل‌کننده‌های بار.
- **قابلیت اطمینان:** افزونگی در مراکز داده مختلف و تکرار داده‌ها.
- **کارایی:** کشینگ و بهینه‌سازی الگوریتم‌های رتبه‌بندی برای کاهش تأخیر.

**ابزارها و الگوها:** Memcached، Cassandra، Kafka، Graph API، الگوریتم‌های یادگیری ماشین.

---

### ۲. توییتر: سرویس تایم‌لاین (Timeline Service)
**مروری کلی:**
سرویس تایم‌لاین توییتر توییت‌های کاربران را به‌صورت بلادرنگ نمایش می‌دهد و باید از تعداد زیادی درخواست خواندن و نوشتن پشتیبانی کند.

**اجزای اصلی:**
- **ذخیره‌سازی توییت‌ها:** از پایگاه داده‌ای مانند Manhattan (پایگاه داده اختصاصی توییتر) یا Cassandra استفاده می‌شود.
- **استراتژی Fan-Out:** هنگام ارسال توییت، آن را به تایم‌لاین فالوورها "فن‌اوت" (پخش) می‌کنند.
- **کشینگ:** Redis برای ذخیره‌سازی تایم‌لاین‌های کاربران و کاهش بار پایگاه داده.
- **صف‌های پیام:** Apache Kafka برای پردازش رویدادهای بلادرنگ.
- **API Gateway:** برای مدیریت درخواست‌های کاربران و هدایت به سرویس‌های مناسب.

**دیاگرام معماری:**
```
[کاربر] --> [API Gateway] --> [سرورهای وب]
                            |
                            v
                       [کش (Redis)]
                            |
                            v
                    [صف پیام (Kafka)]
                            |
                            v
                 [پایگاه داده (Manhattan)]
                            |
                            v
                  [سرویس Fan-Out]
```

**تصمیمات و تریدآف‌ها:**
- **Fan-Out در مقابل Fan-In:** توییتر از مدل Fan-Out برای کاربران عادی استفاده می‌کند (توییت‌ها به تایم‌لاین فالوورها پخش می‌شوند)، اما برای کاربران با فالوورهای زیاد (مانند سلبریتی‌ها) از Fan-In استفاده می‌کند تا بار سرور کاهش یابد.
- **کشینگ گسترده:** استفاده از Redis برای کاهش تأخیر، اما نیاز به مدیریت استراتژی‌های تخلیه کش (مانند LRU).
- **پردازش بلادرنگ:** استفاده از Kafka برای مدیریت رویدادهای بلادرنگ، اما این کار پیچیدگی سیستم را افزایش می‌دهد.

**مقیاس‌پذیری، قابلیت اطمینان، و کارایی:**
- **مقیاس‌پذیری:** شاردینگ داده‌ها و استفاده از چندین خوشه Redis.
- **قابلیت اطمینان:** تکرار داده‌ها در چندین مرکز داده و استفاده از سیستم‌های Failover.
- **کارایی:** بهینه‌سازی Fan-Out برای کاهش تأخیر و افزایش توان عملیاتی.

**ابزارها و الگوها:** Redis، Kafka، Manhattan، Fan-Out/Fan-In، API Gateway.

---

### ۳. آمازون: معماری سرویس‌های کوچک و DynamoDB
**مروری کلی:**
آمازون از معماری سرویس‌های کوچک (Microservices) و معماری سرویس‌محور (SOA) برای پشتیبانی از پلتفرم تجارت الکترونیک خود استفاده می‌کند. DynamoDB به‌عنوان یک پایگاه داده NoSQL مقیاس‌پذیر نقش کلیدی در این معماری ایفا می‌کند.

**اجزای اصلی:**
- **سرویس‌های کوچک:** هر سرویس (مانند سبد خرید، کاتالوگ محصولات، پرداخت) به‌صورت مستقل طراحی و مقیاس‌پذیر است.
- **DynamoDB:** پایگاه داده NoSQL برای ذخیره‌سازی داده‌های تراکنشی با تأخیر کم.
- **تعادل‌کننده بار:** AWS Elastic Load Balancer (ELB) برای توزیع بار بین سرویس‌ها.
- **صف‌های پیام:** Amazon SQS برای مدیریت ارتباطات ناهمگام بین سرویس‌ها.
- **CDN:** Amazon CloudFront برای ارائه محتوای استاتیک با تأخیر کم.

**دیاگرام معماری:**
```
[کاربر] --> [CloudFront (CDN)] --> [تعادل‌کننده بار (ELB)]
                                    |
                                    v
                           [سرویس‌های کوچک]
                                    |
                                    v
                       [صف پیام (SQS)]
                                    |
                                    v
                     [پایگاه داده (DynamoDB)]
```

**تصمیمات و تریدآف‌ها:**
- **سرویس‌های کوچک در مقابل یکپارچه:** آمازون از معماری یکپارچه به سرویس‌های کوچک مهاجرت کرد تا انعطاف‌پذیری و سرعت توسعه را افزایش دهد، اما این کار پیچیدگی هماهنگی بین سرویس‌ها را افزایش داد.
- **DynamoDB در مقابل پایگاه‌های داده رابطه‌ای:** DynamoDB برای مقیاس‌پذیری و تأخیر کم انتخاب شد، اما فاقد قابلیت‌های پیچیده پرس‌وجوهای رابطه‌ای است.
- **هزینه در مقابل کارایی:** استفاده از CloudFront و ELB هزینه‌ها را افزایش می‌دهد، اما کارایی و دسترسی‌پذیری را بهبود می‌بخشد.

**مقیاس‌پذیری، قابلیت اطمینان، و کارایی:**
- **مقیاس‌پذیری:** استفاده از سرویس‌های کوچک و DynamoDB برای مقیاس‌پذیری افقی.
- **قابلیت اطمینان:** افزونگی در چندین منطقه AWS و استفاده از DynamoDB Global Tables برای تکرار داده‌ها.
- **کارایی:** بهینه‌سازی با CloudFront و DynamoDB برای کاهش تأخیر.

**ابزارها و الگوها:** DynamoDB، SQS, ELB, CloudFront، معماری سرویس‌های کوچک، SOA.

---

## درس‌های قابل‌ اعمال در طراحی سیستم

1. **تمرکز بر مقیاس‌پذیری افقی:** هر سه شرکت از مقیاس‌پذیری افقی برای مدیریت بارهای سنگین استفاده می‌کنند. در طراحی‌های خود، شاردینگ و توزیع بار را در نظر بگیرید.
2. **استفاده از کشینگ:** Memcached و Redis برای کاهش تأخیر و بار پایگاه داده ضروری هستند. همیشه لایه کش را در سیستم‌های پرترافیک پیاده‌سازی کنید.
3. **مدیریت تریدآف‌ها:** درک قضیه CAP و انتخاب بین سازگاری و دسترسی‌پذیری برای طراحی سیستم حیاتی است.
4. **پردازش بلادرنگ:** استفاده از صف‌های پیام مانند Kafka یا SQS برای مدیریت رویدادهای بلادرنگ در سیستم‌های مقیاس بزرگ.
5. **معماری سرویس‌های کوچک:** برای انعطاف‌پذیری و توسعه سریع، معماری سرویس‌های کوچک را در نظر بگیرید، اما پیچیدگی‌های هماهنگی را مدیریت کنید.
6. **مانیتورینگ و مشاهده‌پذیری:** استفاده از ابزارهایی مانند Prometheus یا AWS CloudWatch برای تشخیص مشکلات و بهینه‌سازی سیستم.

---

## منابع پیشنهادی برای مطالعه بیشتر

1. *Designing Data-Intensive Applications* نوشته مارتین کلپمن: کتابی جامع برای یادگیری طراحی سیستم‌های مقیاس‌پذیر.
2. *The System Design Primer* (منبع متن‌باز در GitHub): راهنمایی برای تحلیل معماری‌های واقعی.
3. وبلاگ‌های مهندسی:
   - *Facebook Engineering Blog*: مقالات در مورد نیوزفید و Graph API.
   - *Twitter Engineering Blog*: توضیحات در مورد تایم‌لاین و Fan-Out.
   - *AWS Architecture Blog*: مستندات در مورد DynamoDB و سرویس‌های کوچک.
4. دوره‌های آنلاین:
   - *Grokking the System Design Interview* در DesignGuru.io
   - *System Design Course* در Educative.io

---

این سند مروری جامع بر معماری‌های فیسبوک، توییتر و آمازون ارائه می‌دهد و درس‌هایی برای طراحی سیستم‌های مقیاس‌پذیر و کارآمد ارائه می‌کند. در صورت نیاز به توضیحات عمیق‌تر یا مثال‌های بیشتر، لطفاً اطلاع دهید![](https://dev.to/sgchris/designing-a-news-feed-system-facebook-and-twitter-architecture-5292)[](https://aws.amazon.com/blogs/database/supercharging-aws-database-development-with-aws-mcp-servers)[](https://cacm.acm.org/practice/systems-correctness-practices-at-amazon-web-services)