# بررسی نمونه‌های معماری دنیای واقعی: یوتیوب و نتفلیکس

این سند به بررسی معماری سیستم‌های یوتیوب و نتفلیکس، دو پلتفرم پیشرو در زمینه پخش ویدئو، می‌پردازد. هدف این است که با تحلیل معماری این پلتفرم‌ها، درک عمیقی از طراحی سیستم‌های مقیاس‌پذیر، کارآمد و مقاوم در برابر خطا ارائه شود. این محتوا به زبان فارسی و با فرمت مارک‌داون ارائه شده است تا برای مستندسازی آموزشی و یادگیری عمیق مناسب باشد. این سند برای مهندسان نرم‌افزار و دانشجویان طراحی سیستم که می‌خواهند نحوه ساخت پلتفرم‌های ویدئویی مقیاس بزرگ را درک کنند، طراحی شده است.

---

## چرا مطالعه معماری پلتفرم‌هایی مانند یوتیوب و نتفلیکس مفید است؟

مطالعه معماری سیستم‌های یوتیوب و نتفلیکس برای مهندسان نرم‌افزار و معماران سیستم ارزشمند است، زیرا:

1. **مدیریت مقیاس عظیم:** این پلتفرم‌ها روزانه به میلیون‌ها یا میلیاردها کاربر خدمات ارائه می‌دهند و راه‌حل‌های عملی برای چالش‌های مقیاس‌پذیری ارائه می‌کنند.
2. **یادگیری از بهترین روش‌ها:** این سیستم‌ها از فناوری‌ها و الگوهای طراحی پیشرفته استفاده می‌کنند که می‌توانند به‌عنوان الگو در پروژه‌های دیگر به کار روند.
3. **درک تریدآف‌ها:** بررسی تصمیمات معماری و تریدآف‌های این پلتفرم‌ها به مهندسان کمک می‌کند تا انتخاب‌های بهتری در طراحی سیستم‌های خود انجام دهند.
4. **آمادگی برای مصاحبه‌های شغلی:** موضوعات مرتبط با معماری سیستم‌های مقیاس بزرگ، مانند یوتیوب و نتفلیکس، در مصاحبه‌های طراحی سیستم بسیار رایج هستند.
5. **الهام برای نوآوری:** این معماری‌ها نشان‌دهنده استفاده از فناوری‌های ابری، میکروسرویس‌ها و مهندسی آشوب (Chaos Engineering) هستند که می‌توانند در طراحی‌های مدرن اعمال شوند.

این سند معماری این دو پلتفرم را با تمرکز بر مقیاس‌پذیری، کارایی و تحمل خطا بررسی می‌کند و درس‌هایی برای طراحی سیستم ارائه می‌دهد.

---

## مروری بر معماری یوتیوب

یوتیوب، بزرگ‌ترین پلتفرم اشتراک‌گذاری و پخش ویدئو در جهان، برای مدیریت حجم عظیمی از آپلودها، پردازش‌ها و استریم‌های ویدئویی طراحی شده است. معماری یوتیوب باید مقیاس‌پذیر، سریع و قابل اعتماد باشد تا بتواند میلیاردها بازدید روزانه را پشتیبانی کند.

### نحوه آپلود، پردازش، ذخیره‌سازی و استریم ویدئو
1. **آپلود ویدئو:**
   - کاربران ویدئوها را از طریق رابط کاربری (وب یا اپلیکیشن موبایل) آپلود می‌کنند.
   - ویدئوها ابتدا به سرورهای آپلود یوتیوب (معمولاً در مراکز داده گوگل) ارسال می‌شوند.
   - برای کاهش تأخیر، یوتیوب از تعادل‌کننده‌های بار (مانند Google Cloud Load Balancer) برای توزیع درخواست‌های آپلود استفاده می‌کند.

2. **پردازش ویدئو:**
   - پس از آپلود، ویدئوها وارد یک **پایپ‌لاین پردازش** می‌شوند که شامل مراحل زیر است:
     - **اعتبارسنجی:** بررسی فرمت و یکپارچگی فایل ویدئو.
     - **ترانسکدینگ (Transcoding):** تبدیل ویدئو به فرمت‌های مختلف (مانند 720p، 1080p، 4K) برای پشتیبانی از دستگاه‌های مختلف و شرایط شبکه‌ای متنوع.
     - **تقسیم‌بندی:** ویدئو به قطعات کوچک‌تر (chunks) تقسیم‌بندی می‌شود تا استریم تطبیقی (Adaptive Bitrate Streaming) امکان‌پذیر شود.
   - این فرآیند از سیستم‌های توزیع‌شده مانند Google Cloud Dataflow یا Apache Beam برای پردازش موازی استفاده می‌کند.

3. **ذخیره‌سازی:**
   - ویدئوهای اصلی و پردازش‌شده در سیستم‌های ذخیره‌سازی توزیع‌شده مانند **Google Cloud Storage** یا **Google File System (GFS)** ذخیره می‌شوند.
   - متادیتا (مانند عنوان، توضیحات، تگ‌ها) در پایگاه‌های داده NoSQL مانند **Bigtable** ذخیره می‌شوند.

4. **استریم ویدئو:**
   - ویدئوها از طریق شبکه تحویل محتوا (CDN) یوتیوب به کاربران تحویل داده می‌شوند.
   - استریم تطبیقی با استفاده از پروتکل‌هایی مانند **HLS (HTTP Live Streaming)** یا **DASH (Dynamic Adaptive Streaming over HTTP)** انجام می‌شود که کیفیت ویدئو را بر اساس پهنای باند کاربر تنظیم می‌کند.

### استفاده از CDN، کشینگ و سیستم‌های پایگاه داده
- **شبکه تحویل محتوا (CDN):** یوتیوب از **Google Cloud CDN** و سرورهای لبه (Edge Servers) در نقاط مختلف جهان استفاده می‌کند تا ویدئوها را نزدیک به کاربران ذخیره کرده و تأخیر را کاهش دهد.
- **کشینگ:** سیستم‌های کش مانند **Memcached** یا **Redis** برای ذخیره‌سازی متادیتا و داده‌های پراستفاده (مانند اطلاعات ویدئوهای پربازدید) استفاده می‌شوند تا بار پایگاه داده کاهش یابد.
- **پایگاه‌های داده:**
  - **Bigtable:** برای ذخیره‌سازی متادیتای ویدئوها و اطلاعات کاربران با مقیاس‌پذیری بالا.
  - **Spanner:** برای داده‌های تراکنشی که نیاز به سازگاری قوی دارند (مانند اطلاعات اشتراک کاربران).
  - **BigQuery:** برای تحلیل داده‌های بزرگ، مانند رفتار کاربران و الگوهای تماشا.

### فناوری‌ها و الگوهای طراحی
- **فناوری‌ها:** Google Cloud Platform (GCP)، Bigtable، Spanner، BigQuery، Memcached، Apache Beam.
- **الگوهای طراحی:**
  - **میکروسرویس‌ها:** یوتیوب از معماری میکروسرویس‌ها برای جداسازی عملکردها (مانند آپلود، پردازش، و استریم) استفاده می‌کند.
  - **پردازش موازی:** برای ترانسکدینگ و تحلیل داده‌ها.
  - **معماری بدون حالت:** بسیاری از سرویس‌های یوتیوب بدون حالت هستند تا مقیاس‌پذیری افقی آسان‌تر شود.
  - **کشینگ پیش‌بینی‌کننده:** ذخیره‌سازی ویدئوهای پربازدید در سرورهای لبه.

---

## مروری بر معماری نتفلیکس

نتفلیکس، یکی از بزرگ‌ترین پلتفرم‌های پخش ویدئو در جهان، از معماری مبتنی بر ابر و میکروسرویس‌ها برای ارائه خدمات به بیش از ۲۶۰ میلیون کاربر استفاده می‌کند. این پلتفرم بر مقیاس‌پذیری، تحمل خطا و شخصی‌سازی تمرکز دارد.[](https://rockybhatia.substack.com/p/inside-netflixs-architecture-how)

### میکروسرویس‌ها در مقیاس بزرگ
- **معماری میکروسرویس‌ها:** نتفلیکس از صدها میکروسرویس مستقل استفاده می‌کند که هر کدام وظیفه خاصی مانند احراز هویت، توصیه محتوا، استریم ویدئو یا صورت‌حساب را انجام می‌دهند.
  - **مزایا:** مقیاس‌پذیری مستقل، جداسازی خطاها، و توسعه سریع‌تر.
  - **مثال:** اگر سرویس توصیه محتوا از کار بیفتد، سرویس استریم همچنان کار می‌کند.
- **ارتباط بین میکروسرویس‌ها:** از پروتکل‌هایی مانند **gRPC** برای ارتباطات سریع و **Apache Kafka** برای پردازش رویدادهای بلادرنگ استفاده می‌شود.

### تحویل ویدئو، شخصی‌سازی و موتور توصیه
1. **تحویل ویدئو:**
   - نتفلیکس از شبکه تحویل محتوای اختصاصی خود به نام **Open Connect** استفاده می‌کند که سرورهای کش را در مراکز داده ارائه‌دهندگان اینترنت (ISP) قرار می‌دهد.
   - ویدئوها با استفاده از استریم تطبیقی (Adaptive Bitrate Streaming) ارائه می‌شوند، که کیفیت ویدئو را بر اساس پهنای باند کاربر تنظیم می‌کند.
   - فایل‌های ویدئویی در **Amazon S3** ذخیره شده و از طریق Open Connect به کاربران تحویل داده می‌شوند.

2. **شخصی‌سازی و موتور توصیه:**
   - **موتور توصیه:** از الگوریتم‌های یادگیری ماشین (مانند Collaborative Filtering و Deep Learning) برای پیشنهاد محتوا بر اساس تاریخچه تماشا و ترجیحات کاربر استفاده می‌کند.
   - **پردازش داده‌ها:** از ابزارهایی مانند **Apache Spark** و **Kafka** برای تحلیل بلادرنگ داده‌های کاربر و بهبود توصیه‌ها استفاده می‌شود.
   - **شخصی‌سازی رابط کاربری:** رابط کاربری نتفلیکس (مانند ردیف‌های پیشنهادی مانند "برترین انتخاب‌ها برای شما") به‌صورت پویا برای هر کاربر تنظیم می‌شود.

3. **مدیریت محتوا:** متادیتا و اطلاعات کاربران در پایگاه‌های داده مانند **Cassandra** (NoSQL) و **MySQL/RDS** (رابطه‌ای) ذخیره می‌شوند.

### استفاده از AWS و ابزارهای تاب‌آوری
- **AWS:** نتفلیکس به‌طور کامل بر زیرساختенту

System: **Amazon Web Services (AWS)** استفاده می‌کند و از ابزارهایی مانند **Chaos Monkey** برای مهندسی آشوب و تست تاب‌آوری سیستم بهره می‌برد.
  - **Chaos Monkey:** ابزاری است که به‌صورت تصادفی نمونه‌های (Instances) سرور را خاموش می‌کند تا اطمینان حاصل شود که سیستم در برابر خرابی‌ها مقاوم است.
  - **Hystrix:** یک کتابخانه برای مدیریت تأخیر و خطا در سیستم‌های توزیع‌شده، که از خرابی‌های زنجیره‌ای جلوگیری می‌کند.
  - **EVCache:** یک راه‌حل کشینگ مبتنی بر Memcached که برای دسترسی سریع به داده‌های پراستفاده استفاده می‌شود.
- **سایر فناوری‌ها:** Amazon Elastic Load Balancer (ELB)، Amazon SQS، DynamoDB، Elasticsearch.

---

## مقایسه سیستم‌های یوتیوب و نتفلیکس: شباهت‌ها و تفاوت‌های کلیدی

### شباهت‌ها
- **استفاده از CDN:** هر دو از شبکه‌های تحویل محتوا برای کاهش تأخیر و بهبود تجربه استریم استفاده می‌کنند (Google Cloud CDN برای یوتیوب و Open Connect برای نتفلیکس).
- **میکروسرویس‌ها:** هر دو از معماری میکروسرویس‌ها برای جداسازی عملکردها و مقیاس‌پذیری استفاده می‌کنند.
- **پایگاه‌های داده ترکیبی:** استفاده از ترکیبی از پایگاه‌های داده NoSQL (مانند Bigtable و Cassandra) و رابطه‌ای برای مدیریت داده‌ها.
- **استریم تطبیقی:** هر دو از پروتکل‌های HLS و DASH برای تنظیم کیفیت ویدئو بر اساس پهنای باند کاربر استفاده می‌کنند.
- **کشینگ:** استفاده گسترده از Memcached و Redis برای کاهش بار پایگاه داده.

### تفاوت‌های کلیدی
| **معیار**                     | **یوتیوب**                                                                 | **نتفلیکس**                                                                 |
|-------------------------------|-----------------------------------------------------------------------------|-----------------------------------------------------------------------------|
| **زیرساخت ابری**             | مبتنی بر Google Cloud Platform (GCP)                                        | مبتنی بر Amazon Web Services (AWS)                                          |
| **CDN**                      | Google Cloud CDN با سرورهای لبه در نقاط مختلف جهان                         | Open Connect (CDN اختصاصی نتفلیکس)                                         |
| **تمرکز محتوا**              | محتوای تولیدشده توسط کاربر (UGC) و تنوع گسترده ویدئوها                    | محتوای حرفه‌ای (فیلم‌ها و سریال‌های دارای مجوز)                           |
| **شخصی‌سازی**                | توصیه‌های مبتنی بر الگوریتم برای ویدئوهای مرتبط                           | شخصی‌سازی پیشرفته با ردیف‌های پیشنهادی و توصیه‌های مبتنی بر یادگیری ماشین |
| **مهندسی آشوب**              | کمتر مستند شده است، اما از تکنیک‌های مشابه برای تاب‌آوری استفاده می‌کند   | استفاده گسترده از Chaos Monkey و Simian Army برای تست تاب‌آوری            |
| **پایگاه داده اصلی**         | Bigtable و Spanner برای مقیاس‌پذیری و سازگاری                             | Cassandra و DynamoDB برای مقیاس‌پذیری بالا                                 |

- **یوتیوب:** بر مدیریت حجم عظیمی از ویدئوهای تولیدشده توسط کاربر تمرکز دارد و نیاز به پردازش و ذخیره‌سازی گسترده دارد.
- **نتفلیکس:** بر ارائه محتوای باکیفیت بالا و شخصی‌سازی پیشرفته تمرکز دارد و از ابزارهای مهندسی آشوب برای اطمینان از تاب‌آوری استفاده می‌کند.

---

## استراتژی‌های مقیاس‌پذیری، کارایی و تحمل خطا

### یوتیوب
- **مقیاس‌پذیری:**
  - استفاده از **شاردینگ** در Bigtable برای توزیع داده‌ها در چندین سرور.
  - مقیاس‌پذیری افقی با افزودن سرورهای بیشتر به خوشه‌ها.
  - استفاده از Google Cloud Load Balancer برای توزیع بار.
- **کارایی:**
  - کشینگ گسترده با Memcached برای کاهش تأخیر در دسترسی به متادیتا.
  - استفاده از سرورهای لبه CDN برای ارائه سریع ویدئوها.
  - بهینه‌سازی ترانسکدینگ با پردازش موازی در Dataflow.
- **تحمل خطا:**
  - تکرار داده‌ها در چندین مرکز داده برای جلوگیری از از دست رفتن داده‌ها.
  - استفاده از معماری بدون حالت برای بسیاری از سرویس‌ها.
  - طراحی سیستم برای تحمل خرابی‌های منطقه‌ای با توزیع جغرافیایی.

### نتفلیکس
- **مقیاس‌پذیری:**
  - مقیاس‌پذیری مستقل هر میکروسرویس با استفاده از AWS Auto Scaling.
  - استفاده از **Titus** (پلتفرم مدیریت کانتینر نتفلیکس) برای مقیاس‌پذیری کانتینرها.
  - شاردینگ داده‌ها در Cassandra و DynamoDB.
- **کارایی:**
  - استفاده از **EVCache** برای دسترسی سریع به داده‌های پراستفاده.
  - بهینه‌سازی CDN با Open Connect برای کاهش تأخیر.
  - پردازش بلادرنگ داده‌ها با Kafka و Spark برای توصیه‌ها.
- **تحمل خطا:**
  - استفاده از **Chaos Monkey** برای تست تاب‌آوری با خاموش کردن تصادفی سرورها.
  - **Hystrix** برای جلوگیری از خرابی‌های زنجیره‌ای با استفاده از الگوهای Circuit Breaker و Fallback.
  - تکرار داده‌ها در چندین منطقه AWS برای تحمل خرابی‌های منطقه‌ای.[](https://rockybhatia.substack.com/p/inside-netflixs-architecture-how)

---

## دیاگرام‌ها و تصاویر

### دیاگرام معماری یوتیوب

```
[کاربر] --> [Google Cloud CDN] --> [تعادل‌کننده بار (Google Cloud Load Balancer)]
                                    |
                                    v
                               [سرورهای وب]
                                    |
                                    v
                           [کش (Memcached/Redis)]
                                    |
                                    v
                       [پایپ‌لاین پردازش (Dataflow)]
                                    |
                                    v
                     [پایگاه داده (Bigtable/Spanner)]
                                    |
                                    v
                     [ذخیره‌سازی (Google Cloud Storage)]
```

**توضیح:** کاربر از طریق CDN به سرورهای یوتیوب متصل می‌شود. درخواست‌ها از طریق تعادل‌کننده بار توزیع شده و داده‌ها از کش یا پایگاه داده بازیابی می‌شوند. ویدئوها از Google Cloud Storage استریم می‌شوند.

### دیاگرام معماری نتفلیکس

```
[کاربر] --> [Open Connect (CDN)] --> [تعادل‌کننده بار (AWS ELB)]
                                    |
                                    v
                           [API Gateway (Zuul)]
                                    |
                                    v
                         [میکروسرویس‌ها (Titus)]
                                    |
                                    v
                       [کش (EVCache)]  [صف پیام (Kafka/SQS)]
                                    |
                                    v
                     [پایگاه داده (Cassandra/DynamoDB)]
                                    |
                                    v
                     [ذخیره‌سازی (Amazon S3)]
```

**توضیح:** کاربر از طریق Open Connect به سرورهای نتفلیکس متصل می‌شود. API Gateway درخواست‌ها را به میکروسرویس‌های مناسب هدایت می‌کند، که از کش، صف‌های پیام و پایگاه‌های داده برای پردازش استفاده می‌کنند.[](https://talent500.com/blog/netflix-streaming-architecture-explained/)

---

## درس‌هایی که مهندسان نرم‌افزار می‌توانند از این معماری‌ها بیاموزند

1. **تمرکز بر مقیاس‌پذیری افقی:** هر دو پلتفرم از افزودن سرورهای بیشتر برای مدیریت بار استفاده می‌کنند. در طراحی سیستم خود، از شاردینگ و تعادل بار استفاده کنید.
2. **استفاده از CDN:** برای کاهش تأخیر و بهبود تجربه کاربر، استفاده از CDN برای ارائه محتوای نزدیک به کاربران ضروری است.
3. **معماری میکروسرویس‌ها:** جداسازی عملکردها به سرویس‌های مستقل، توسعه و مقیاس‌پذیری را آسان‌تر می‌کند.
4. **کشینگ گسترده:** استفاده از Memcached، Redis یا EVCache برای کاهش بار پایگاه داده و بهبود کارایی.
5. **مهندسی آشوب:** تست تاب‌آوری سیستم با ابزارهایی مانند Chaos Monkey برای اطمینان از تحمل خطا.
6. **شخصی‌سازی کاربر:** استفاده از الگوریتم‌های یادگیری ماشین برای بهبود تجربه کاربر، به‌ویژه در توصیه محتوا.
7. **پردازش بلادرنگ:** ابزارهایی مانند Kafka و Spark برای تحلیل داده‌های کاربر و بهبود توصیه‌ها در زمان واقعی.
8. **تریدآف‌های طراحی:** انتخاب بین سازگاری و دسترسی‌پذیری (بر اساس قضیه CAP) برای بهینه‌سازی عملکرد سیستم.

---

## منابع پیشنهادی برای مطالعه بیشتر

1. *Designing Data-Intensive Applications* نوشته مارتین کلپمن: کتابی جامع برای یادگیری طراحی سیستم‌های مقیاس‌پذیر.
2. *The System Design Primer* (منبع متن‌باز در GitHub): راهنمایی برای تحلیل معماری‌های واقعی.
3. وبلاگ‌های مهندسی:
   - *Google Cloud Blog*: مقالات در مورد فناوری‌های GCP و معماری یوتیوب.
   - *Netflix Tech Blog*: مقالات در مورد میکروسرویس‌ها، Open Connect و Chaos Engineering.[](https://dev.to/somadevtoo/10-things-you-can-learn-from-netflixs-architecture-1bnn)
4. دوره‌های آنلاین:
   - *Grokking the System Design Interview* در DesignGuru.io
   - *System Design Course* در Educative.io
5. مقالات خاص:
   - "Netflix: A Deep Dive into Its System Design and Scalability" در Medium[](https://medium.com/%40narengowda/netflix-system-design-dbec30fede8d)
   - "Building a Video Streaming Platform: Netflix Architecture Deep Dive" در DEV Community[](https://dev.to/sgchris/building-a-video-streaming-platform-netflix-architecture-deep-dive-36fg)

---

این سند مروری جامع بر معماری‌های یوتیوب و نتفلیکس ارائه می‌دهد و درس‌هایی برای طراحی سیستم‌های مقیاس‌پذیر و کارآمد ارائه می‌کند. در صورت نیاز به توضیحات عمیق‌تر یا مثال‌های بیشتر، لطفاً اطلاع دهید!