# الگوریتم‌های متعادل‌سازی بار: Round Robin و Least Connections

این سند به بررسی دو الگوریتم متداول متعادل‌سازی بار، یعنی **Round Robin** و **Least Connections**، و نقش آن‌ها در توزیع ترافیک در سیستم‌های مقیاس‌پذیر می‌پردازد. هدف این است که با ارائه تعاریف، نحوه عملکرد، مزایا و معایب، مقایسه، سایر الگوریتم‌ها، ملاحظات عملی و بهترین روش‌ها، یک راهنمای جامع و آموزشی برای یادگیری طراحی سیستم فراهم شود. این محتوا به زبان فارسی و با فرمت مارک‌داون ارائه شده است تا برای مستندسازی آموزشی مناسب باشد.

---

## مقدمه: الگوریتم‌های متعادل‌سازی بار و نقش آن‌ها در توزیع ترافیک

**متعادل‌سازی بار (Load Balancing)** فرآیند توزیع ترافیک یا بار کاری (مانند درخواست‌های کاربران) بین چندین سرور یا منبع محاسباتی است تا از اضافه‌بار یک سرور جلوگیری کرده و عملکرد، مقیاس‌پذیری و قابلیت اطمینان سیستم بهبود یابد. **الگوریتم‌های متعادل‌سازی بار** تعیین می‌کنند که چگونه درخواست‌ها بین سرورهای موجود توزیع شوند. انتخاب الگوریتم مناسب به عواملی مانند نوع بار کاری، ظرفیت سرورها و نیازهای سیستم بستگی دارد.

**چرا الگوریتم‌های متعادل‌سازی مهم هستند؟**
- **توزیع بهینه:** اطمینان از توزیع یکنواخت یا هوشمند ترافیک برای بهبود عملکرد.
- **جلوگیری از گلوگاه‌ها:** کاهش فشار روی سرورهای خاص و جلوگیری از خرابی.
- **افزایش دسترس‌پذیری:** هدایت درخواست‌ها به سرورهای سالم برای حفظ پایداری.
- **انعطاف‌پذیری:** سازگاری با بارهای متغیر و نیازهای برنامه‌های مختلف.

این سند دو الگوریتم پرکاربرد، Round Robin و Least Connections، را بررسی کرده و راهنمایی برای انتخاب مناسب ارائه می‌دهد.

---

## الگوریتم Round Robin

### نحوه عملکرد (گام‌به‌گام)
**Round Robin** یک الگوریتم ساده و چرخشی است که درخواست‌های ورودی را به‌صورت متوالی و یکنواخت بین سرورهای موجود توزیع می‌کند.

1. **لیست سرورها:** متعادل‌ساز بار لیستی از سرورهای موجود (مانند سرورهای A، B، C) را نگهداری می‌کند.
2. **تخصیص چرخشی:** هر درخواست جدید به سرور بعدی در لیست هدایت می‌شود.
3. **چرخه تکراری:** پس از رسیدن به آخرین سرور، چرخه از ابتدا شروع می‌شود.
4. **بررسی سلامت (Health Check):** اگر سروری در دسترس نباشد، از چرخه حذف شده و درخواست به سرور بعدی هدایت می‌شود.

**مثال:**
- فرض کنید سه سرور (A، B، C) داریم.
- درخواست‌ها به ترتیب به سرورها هدایت می‌شوند: درخواست ۱ به A، درخواست ۲ به B، درخواست ۳ به C، درخواست ۴ به A، و غیره.

### مزایا و معایب
- **مزایا:**
  - **سادگی:** پیاده‌سازی و درک آن آسان است.
  - **عادلانه برای سرورهای یکسان:** اگر سرورها ظرفیت مشابهی داشته باشند، ترافیک به‌طور یکنواخت توزیع می‌شود.
  - **مناسب برای بارهای سبک:** برای سیستم‌هایی با ترافیک نسبتاً ثابت و سرورهای همگن مناسب است.
- **معایب:**
  - **عدم توجه به بار سرور:** سرورهای پربار ممکن است درخواست‌های بیشتری دریافت کنند، که باعث کندی یا خرابی می‌شود.
  - **نامناسب برای سرورهای ناهمگن:** اگر سرورها ظرفیت متفاوتی داشته باشند، توزیع یکنواخت کارآمد نیست.
  - **عدم پشتیبانی از وظایف زمان‌بر:** درخواست‌های سنگین ممکن است یک سرور را بیش از حد مشغول کنند.

### بهترین زمان استفاده
- **سیستم‌های با سرورهای یکسان:** زمانی که تمام سرورها مشخصات و ظرفیت مشابهی دارند.
- **ترافیک ثابت:** برای برنامه‌هایی با بار کاری نسبتاً یکنواخت (مانند وب‌سایت‌های استاتیک).
- **پیاده‌سازی ساده:** زمانی که سادگی و سرعت پیاده‌سازی اولویت دارد.
- **مثال:** توزیع ترافیک بین سرورهای وب یک وب‌سایت خبری با استفاده از NGINX.

---

## الگوریتم Least Connections

### نحوه عملکرد (گام‌به‌گام)
**Least Connections** درخواست‌ها را به سروری هدایت می‌کند که کمترین تعداد اتصال فعال (یا بار کاری) را دارد. این الگوریتم بار سرورها را در نظر می‌گیرد تا از اضافه‌بار جلوگیری کند.

1. **مانیتورینگ اتصالات:** متعادل‌ساز بار تعداد اتصال‌های فعال هر سرور را رصد می‌کند.
2. **انتخاب سرور:** درخواست جدید به سروری با کمترین تعداد اتصال فعال هدایت می‌شود.
3. **به‌روزرسانی پویا:** با تغییر تعداد اتصالات (مانند پایان یک درخواست)، سرور با کمترین اتصال برای درخواست بعدی انتخاب می‌شود.
4. **بررسی سلامت:** سرورهای معیوب از چرخه توزیع حذف می‌شوند.

**مثال:**
- فرض کنید سه سرور (A، B، C) داریم با تعداد اتصال‌های فعال به ترتیب ۵، ۲، و ۸.
- درخواست جدید به سرور B (با ۲ اتصال) هدایت می‌شود، زیرا کمترین بار را دارد.

### مزایا و معایب
- **مزایا:**
  - **توزیع هوشمند:** بار کاری را بر اساس وضعیت فعلی سرورها توزیع می‌کند.
  - **مناسب برای بارهای متغیر:** برای سیستم‌هایی با درخواست‌های زمان‌بر یا متغیر (مانند پردازش پرداخت) مناسب است.
  - **بهینه برای سرورهای ناهمگن:** حتی اگر سرورها ظرفیت متفاوتی داشته باشند، کارآمد عمل می‌کند.
- **معایب:**
  - **پیچیدگی بیشتر:** نیاز به مانیتورینگ مداوم تعداد اتصالات.
  - **سربار محاسباتی:** محاسبه سرور با کمترین اتصال می‌تواند تأخیر جزئی ایجاد کند.
  - **وابستگی به مانیتورینگ:** اگر بررسی سلامت دقیق نباشد، ممکن است به سرورهای کند هدایت شود.

### بهترین زمان استفاده
- **سیستم‌های با بار متغیر:** زمانی که درخواست‌ها زمان پردازش متفاوتی دارند (مانند پردازش تصاویر).
- **سرورهای ناهمگن:** زمانی که سرورها ظرفیت یا مشخصات متفاوتی دارند.
- **برنامه‌های پویا:** مانند اپلیکیشن‌های تجارت الکترونیک با ترافیک نوسانی.
- **مثال:** توزیع ترافیک در یک پلتفرم پخش ویدئو (مانند نتفلیکس) با استفاده از HAProxy.

---

## مقایسه بین Round Robin و Least Connections

| **معیار**                | **Round Robin**                            | **Least Connections**                      |
|--------------------------|--------------------------------------------|--------------------------------------------|
| **نحوه توزیع**          | چرخشی و یکنواخت                          | بر اساس کمترین تعداد اتصال فعال          |
| **پیچیدگی**             | ساده                                      | پیچیده‌تر، نیاز به مانیتورینگ            |
| **مناسب برای**          | سرورهای یکسان، بار ثابت                  | سرورهای ناهمگن، بار متغیر               |
| **مزایا**               | سادگی، توزیع عادلانه                     | توزیع هوشمند، مناسب برای بارهای پویا      |
| **معایب**               | عدم توجه به بار سرور                     | سربار محاسباتی، وابستگی به مانیتورینگ   |
| **موارد استفاده**       | وب‌سایت‌های استاتیک، برنامه‌های ساده      | اپلیکیشن‌های پویا، میکروسرویس‌ها         |
| **مثال ابزار**          | NGINX، AWS ELB                            | HAProxy، Envoy                            |

---

## مروری بر سایر الگوریتم‌های متداول متعادل‌سازی بار

1. **IP Hash:**
   - درخواست‌ها بر اساس هش آدرس IP کلاینت به سرور خاصی هدایت می‌شوند.
   - **کاربرد:** حفظ جلسه (Session Persistence) در برنامه‌هایی مانند سیستم‌های بانکی.
2. **Weighted Round Robin:**
   - نسخه پیشرفته Round Robin که وزن‌های مختلفی به سرورها اختصاص می‌دهد (بر اساس ظرفیت).
   - **کاربرد:** سیستم‌هایی با سرورهای ناهمگن.
3. **Weighted Least Connections:**
   - مشابه Least Connections، اما با در نظر گرفتن وزن سرورها.
   - **کاربرد:** سرورهای با ظرفیت‌های متفاوت.
4. **Random:**
   - درخواست‌ها به‌صورت تصادفی به سرورها هدایت می‌شوند.
   - **کاربرد:** سیستم‌های ساده با بار یکنواخت.

---

## ملاحظات عملی در انتخاب الگوریتم‌ها

### عوامل تأثیرگذار
1. **نوع بار کاری:**
   - برای بارهای ثابت و سرورهای یکسان (مانند وب‌سایت‌های استاتیک)، Round Robin مناسب است.
   - برای بارهای متغیر یا درخواست‌های زمان‌بر (مانند پردازش ویدئو)، Least Connections بهتر است.
2. **مشخصات سرورها:**
   - اگر سرورها ظرفیت یکسانی دارند، Round Robin کافی است.
   - اگر سرورها ناهمگن هستند، از Least Connections یا Weighted Round Robin استفاده کنید.
3. **نیاز به حفظ جلسه:**
   - برای برنامه‌هایی که نیاز به حفظ جلسه دارند (مانند اپلیکیشن‌های بانکی)، از IP Hash استفاده کنید.
4. **پیچیدگی و منابع:**
   - Round Robin به دلیل سادگی برای سیستم‌های کوچک مناسب است.
   - Least Connections نیاز به مانیتورینگ پیشرفته و منابع محاسباتی بیشتری دارد.
5. **مقیاس سیستم:**
   - در سیستم‌های بزرگ با ترافیک بالا (مانند میکروسرویس‌ها)، Least Connections یا الگوریتم‌های وزن‌دار کارآمدتر هستند.

### مثال‌های واقعی
- **وب‌سایت خبری:** از Round Robin برای توزیع ترافیک بین سرورهای وب یکسان استفاده می‌کند.
- **پلتفرم تجارت الکترونیک:** از Least Connections برای مدیریت ترافیک در زمان اوج خرید (مانند Black Friday) استفاده می‌کند.
- **اپلیکیشن بانکی:** از IP Hash برای حفظ جلسه کاربران در تراکنش‌های آنلاین استفاده می‌کند.

---

## خلاصه و بهترین روش‌ها

### خلاصه
- **الگوریتم‌های متعادل‌سازی بار:** روش‌هایی برای توزیع ترافیک بین سرورها برای بهبود عملکرد و مقیاس‌پذیری.
- **Round Robin:** ساده و عادلانه، مناسب برای سرورهای یکسان و بارهای ثابت.
- **Least Connections:** هوشمند و پویا، مناسب برای سرورهای ناهمگن و بارهای متغیر.
- **مقایسه:** Round Robin ساده‌تر است، اما Least Connections برای بارهای پویا کارآمدتر است.
- **درس کلیدی:** انتخاب الگوریتم به نوع بار کاری، مشخصات سرورها و نیازهای سیستم بستگی دارد.

### بهترین روش‌ها
1. **ارزیابی بار کاری:**
   - نوع و الگوی ترافیک (ثابت یا متغیر) را تحلیل کنید تا الگوریتم مناسب را انتخاب کنید.
2. **مانیتورینگ سرورها:**
   - از بررسی‌های سلامت (Health Checks) برای حذف سرورهای معیوب از چرخه توزیع استفاده کنید.
   - در Least Connections، تعداد اتصالات را به‌صورت بلادرنگ رصد کنید.
3. **ترکیب الگوریتم‌ها:**
   - در سیستم‌های پیچیده، از ترکیب الگوریتم‌ها (مانند Weighted Round Robin و Least Connections) استفاده کنید.
4. **امنیت و بهینه‌سازی:**
   - از SSL/TLS برای رمزگذاری ترافیک استفاده کنید.
   - معیارهای کلیدی مانند تأخیر، نرخ خطا و تعداد اتصالات را با ابزارهایی مانند Prometheus رصد کنید.
5. **ادغام با ابزارها:**
   - از متعادل‌سازهایی مانند NGINX، HAProxy یا AWS ELB برای پیاده‌سازی الگوریتم‌ها استفاده کنید.
   - در محیط‌های ابری، از قابلیت‌های Auto Scaling برای تنظیم پویا منابع استفاده کنید.
6. **آزمایش و بهینه‌سازی:**
   - الگوریتم‌ها را در محیط‌های آزمایشی تست کنید تا بهترین گزینه را برای سیستم خود انتخاب کنید.
   - عملکرد را با ابزارهای مانیتورینگ مانند Grafana بهینه کنید.

---

## منابع پیشنهادی برای مطالعه بیشتر
1. *Designing Data-Intensive Applications* نوشته مارتین کلپمن: کتابی جامع برای یادگیری طراحی سیستم‌های مقیاس‌پذیر.
2. *The System Design Primer* (منبع متن‌باز در GitHub): راهنمایی برای طراحی سیستم‌های مدرن.
3. وبلاگ‌های مهندسی:
   - *NGINX Blog*: راهنمایی برای تنظیم الگوریتم‌های متعادل‌سازی در NGINX.
   - *HAProxy Blog*: مقالات در مورد الگوریتم‌های متعادل‌سازی و بهینه‌سازی.
   - *AWS Blog*: توضیحات در مورد الگوریتم‌های AWS ELB.
4. مستندات رسمی:
   - [NGINX Documentation](https://nginx.org/en/docs/)
   - [HAProxy Documentation](https://www.haproxy.org/#docs)
   - [AWS ELB Documentation](https://docs.aws.amazon.com/elasticloadbalancing/)
5. دوره‌های آنلاین:
   - *Grokking the System Design Interview* در DesignGuru.io
   - *System Design Course* در Educative.io

---

این سند الگوریتم‌های متعادل‌سازی بار Round Robin و Least Connections را به‌صورت جامع توضیح داده و برای مهندسان علاقه‌مند به طراحی سیستم‌های مقیاس‌پذیر مناسب است. در صورت نیاز به جزئیات بیشتر یا مثال‌های دیگر، لطفاً اطلاع دهید!