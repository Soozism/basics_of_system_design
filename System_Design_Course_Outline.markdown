# سرفصل‌های طراحی سیستم برای مهندسی نرم‌افزار

این سند به‌عنوان یک راهنمای جامع برای یادگیری طراحی سیستم از صفر طراحی شده است. ساختار زیر با الهام از منابع معتبر مانند *The System Design Primer* و *Designing Data-Intensive Applications* ایجاد شده و برای آموزش مفاهیم معماری نرم‌افزار به‌صورت کامل و ساختاریافته مناسب است. این سرفصل‌ها هم برای آمادگی مصاحبه‌های شغلی و هم برای کسب دانش عملی در معماری سیستم‌های دنیای واقعی مناسب هستند.

---

## بخش اول: مفاهیم پایه‌ای طراحی سیستم
### فصل ۱: مقدمه‌ای بر طراحی سیستم
- تعریف طراحی سیستم و اهمیت آن در مهندسی نرم‌افزار
- تفاوت بین طراحی سیستم در مقیاس کوچک و بزرگ
- اصول اولیه معماری نرم‌افزار (مانند مقیاس‌پذیری، قابلیت اطمینان، و کارایی)
- مروری بر معماری‌های دنیای واقعی (مانند فیسبوک، توییتر، و آمازون)

### فصل ۲: اجزای اصلی معماری نرم‌افزار
- معرفی لایه‌های معماری: لایه ارائه (Presentation Layer)، منطق تجاری (Business Logic)، و دسترسی به داده‌ها (Data Access Layer)
- مفهوم جداسازی وظایف (Separation of Concerns)
- معماری‌های کلاینت-سرور، بدون حالت (Stateless)، و حالت‌دار (Stateful)
- مثال‌های واقعی: معماری‌های یوتیوب و نتفلیکس

### فصل ۳: مفاهیم کلیدی در طراحی سیستم
- مقیاس‌پذیری (Scalability): افقی و عمودی
- قابلیت اطمینان (Reliability) و تحمل خطا (Fault Tolerance)
- دسترسی‌پذیری (Availability) و توافق‌نامه سطح خدمات (SLA)
- کارایی (Performance) و تأخیر (Latency) در مقابل توان عملیاتی (Throughput)
- مدیریت داده‌ها: سازگاری (Consistency) در مقابل دسترسی‌پذیری (Availability) (قضیه CAP)

---

## بخش دوم: اجزای اصلی سیستم‌های مقیاس‌پذیر
### فصل ۴: پایگاه‌های داده و ذخیره‌سازی
- پایگاه‌های داده رابطه‌ای (Relational Databases) در مقابل غیررابطه‌ای (NoSQL)
- انتخاب پایگاه داده مناسب: MySQL، PostgreSQL، MongoDB، Cassandra
- شاردینگ (Sharding) و پارتیشن‌بندی (Partitioning)
- ایندکس‌گذاری (Indexing) و بهینه‌سازی پرس‌وجوها
- مثال‌های واقعی: استفاده از DynamoDB در آمازون و MongoDB در اینستاگرام

### فصل ۵: کشینگ (Caching)
- مفهوم کشینگ و اهمیت آن در بهبود کارایی
- انواع کش: کش سمت کلاینت، کش سمت سرور، و کش توزیع‌شده (مانند Redis، Memcached)
- استراتژی‌های تخلیه کش (Cache Eviction): LRU، LFU
- مثال‌های واقعی: استفاده از Redis در توییتر برای کش کردن تایم‌لاین‌ها

### فصل ۶: معماری سرویس‌های کوچک (Microservices)
- تعریف سرویس‌های کوچک و تفاوت با معماری یکپارچه (Monolithic)
- مزایا و معایب سرویس‌های کوچک
- ارتباط بین سرویس‌ها: REST، gRPC، و پیام‌رسانی (Message Queues)
- مثال‌های واقعی: معماری سرویس‌های کوچک در نتفلیکس و اوبر

### فصل ۷: پیام‌رسانی و صف‌ها
- مفهوم صف‌های پیام (Message Queues): RabbitMQ، Kafka، و SQS
- معماری‌های مبتنی بر رویداد (Event-Driven Architectures)
- پردازش داده‌های بلادرنگ در مقابل دسته‌ای (Batch Processing)
- مثال‌های واقعی: استفاده از Kafka در لینکدین برای پردازش داده‌ها

---

## بخش سوم: طراحی سیستم‌های مقیاس‌پذیر و قابل اعتماد
### فصل ۸: تعادل بار (Load Balancing)
- مفهوم تعادل بار و اهمیت آن در مقیاس‌پذیری
- انواع تعادل‌کننده‌های بار: سخت‌افزاری و نرم‌افزاری (مانند NGINX، HAProxy)
- الگوریتم‌های تعادل بار: Round Robin، Least Connections
- مثال‌های واقعی: استفاده از AWS Elastic Load Balancer در آمازون

### فصل ۹: مقیاس‌پذیری افقی و عمودی
- تفاوت بین مقیاس‌پذیری افقی و عمودی
- چالش‌های مقیاس‌پذیری افقی: هماهنگی و مدیریت حالت
- ابزارهای مدیریت مقیاس‌پذیری: Kubernetes، Docker
- مثال‌های واقعی: استفاده از Kubernetes در اسپاتیفای

### فصل ۱۰: مدیریت خرابی‌ها و تحمل خطا
- طراحی برای خرابی: افزونگی (Redundancy) و تکرار (Replication)
- مفهوم Failover و Fallback
- معماری‌های بدون تک‌نقطه خرابی (Single Point of Failure)
- مثال‌های واقعی: سیستم‌های تحمل خطای گوگل

---

## بخش چهارم: موضوعات پیشرفته در طراحی سیستم
### فصل ۱۱: سیستم‌های توزیع‌شده
- چالش‌های سیستم‌های توزیع‌شده: هماهنگی، سازگاری، و پارتیشن‌بندی
- قضیه CAP و PACELC
- پروتکل‌های اجماع: Paxos، Raft
- مثال‌های واقعی: استفاده از ZooKeeper در آپاچی هدوپ

### فصل ۱۲: پردازش داده‌های بزرگ
- مفاهیم پردازش داده‌های بزرگ: MapReduce، Spark
- جریان‌سازی داده‌ها (Data Streaming) در مقابل پردازش دسته‌ای
- ابزارهای پردازش داده: Apache Flink، Apache Storm
- مثال‌های واقعی: پردازش داده‌های توییتر با Spark

### فصل ۱۳: امنیت در طراحی سیستم
- اصول امنیتی: احراز هویت (Authentication) و مجوزدهی (Authorization)
- رمزنگاری و امنیت داده‌ها
- محافظت در برابر حملات DDoS
- مثال‌های واقعی: سیستم‌های امنیتی فیسبوک

### فصل ۱۴: نظارت و مانیتورینگ
- اهمیت نظارت بر سیستم‌ها: معیارها (Metrics)، لاگ‌ها (Logs)، و ردیابی (Tracing)
- ابزارهای مانیتورینگ: Prometheus، Grafana، ELK Stack
- مدیریت هشدارها و پاسخ به حوادث
- مثال‌های واقعی: استفاده از Prometheus در اوبر

---

## بخش پنجم: آمادگی برای مصاحبه‌های طراحی سیستم
### فصل ۱۵: رویکرد حل مسئله در مصاحبه‌های طراحی سیستم
- چارچوب حل مسئله: شناسایی الزامات، تعریف APIها، و طراحی معماری
- مدیریت الزامات غیرکارکردی (Non-Functional Requirements)
- ترسیم معماری و توضیح تصمیمات
- مثال‌های واقعی: طراحی یک سیستم مشابه URL Shortener یا Twitter

### فصل ۱۶: نمونه سؤالات مصاحبه طراحی سیستم
- طراحی یک سیستم کوتاه‌کننده URL
- طراحی یک سیستم پیام‌رسان مانند WhatsApp
- طراحی یک سیستم توصیه‌گر مانند یوتیوب
- طراحی یک سیستم جستجو مانند گوگل

### فصل ۱۷: نکات و ترفندهای مصاحبه
- نحوه ارائه پاسخ‌های ساختاریافته
- مدیریت سؤالات مبهم و باز
- بحث در مورد تریدآف‌ها (Trade-offs) و تصمیم‌گیری
- تمرین با سناریوهای واقعی: آمازون، گوگل، و فیسبوک

---

## بخش ششم: پروژه‌های عملی و مطالعات موردی
### فصل ۱۸: پروژه‌های عملی طراحی سیستم
- پروژه ۱: طراحی سیستم تایم‌لاین توییتر
- پروژه ۲: طراحی سیستم ذخیره‌سازی فایل مانند Dropbox
- پروژه ۳: طراحی سیستم پخش ویدئو مانند یوتیوب
- پروژه ۴: طراحی سیستم تجارت الکترونیک مانند آمازون

### فصل ۱۹: مطالعات موردی دنیای واقعی
- مطالعه موردی ۱: معماری فیسبوک برای مقیاس‌پذیری
- مطالعه موردی ۲: سیستم پیام‌رسانی WhatsApp
- مطالعه موردی ۳: سیستم جستجوی گوگل
- مطالعه موردی ۴: سیستم توصیه‌گر نتفلیکس

---

## منابع پیشنهادی
- *The System Design Primer* (منبع متن‌باز در GitHub)
- *Designing Data-Intensive Applications* نوشته مارتین کلپمن
- دوره‌های آنلاین: Coursera، Udemy، و Educative.io
- وبلاگ‌های مهندسی شرکت‌های بزرگ: Netflix Tech Blog، Uber Engineering Blog