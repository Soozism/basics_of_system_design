# پروتکل‌های اجماع Paxos و Raft در سیستم‌های توزیع‌شده

## مقدمه‌ای بر نیاز به اجماع در سیستم‌های توزیع‌شده

**اجماع (Consensus)** در سیستم‌های توزیع‌شده به معنای توافق تمام گره‌های سالم بر روی یک مقدار یا تصمیم مشترک است، حتی در حضور خرابی‌ها یا مشکلات شبکه. اجماع برای اطمینان از **هماهنگی** و **سازگاری** در سیستم‌های توزیع‌شده حیاتی است.

### چرا اجماع مورد نیاز است؟
- **هماهنگی**: در سیستم‌های توزیع‌شده، گره‌ها باید بر روی وظایفی مانند انتخاب رهبر، تخصیص منابع یا ترتیب عملیات توافق کنند.
- **سازگاری داده‌ها**: برای حفظ سازگاری (Consistency) در پایگاه‌های داده توزیع‌شده، گره‌ها باید بر روی ترتیب و محتوای به‌روزرسانی‌ها توافق کنند.
- **تحمل‌پذیری خطا**: سیستم‌های توزیع‌شده باید در برابر خرابی‌های گره‌ها یا پارتیشن‌بندی شبکه (Network Partition) مقاوم باشند و اجماع این امکان را فراهم می‌کند.

### چالش‌های دستیابی به اجماع
- **شبکه غیرقابل اعتماد**: پیام‌ها ممکن است گم شوند، تأخیر داشته باشند یا به ترتیب نادرست برسند.
- **خرابی گره‌ها**: گره‌ها ممکن است از کار بیفتند یا به‌طور موقت از دسترس خارج شوند.
- **مشکلات همگام‌سازی**: ساعت‌های غیرهمگام (Clock Skew) می‌توانند ترتیب‌بندی رویدادها را مختل کنند.
- **مشکل Split-Brain**: در صورت پارتیشن‌بندی شبکه، ممکن است گره‌ها به دو گروه جداگانه تقسیم شوند و تصمیمات متضادی بگیرند.

پروتکل‌های اجماع مانند **Paxos** و **Raft** برای غلبه بر این چالش‌ها طراحی شده‌اند و امکان توافق قابل اعتماد را در محیط‌های غیرقابل پیش‌بینی فراهم می‌کنند.

---

## مروری بر پروتکل Paxos

**Paxos** یکی از اولین و شناخته‌شده‌ترین پروتکل‌های اجماع است که توسط لزلی لمپورت در سال 1989 معرفی شد. این پروتکل برای اطمینان از توافق بین گره‌ها در سیستم‌های توزیع‌شده استفاده می‌شود.

### مفاهیم و مراحل اصلی Paxos
Paxos شامل سه نقش اصلی است: **پیشنهاددهنده (Proposer)**، **پذیرنده (Acceptor)** و **یادگیرنده (Learner)**. فرآیند اجماع در سه مرحله انجام می‌شود:
1. **مرحله آماده‌سازی (Prepare)**:
   - پیشنهاددهنده یک شماره پیشنهاد (Proposal Number) را به پذیرنده‌ها ارسال می‌کند.
   - پذیرنده‌ها بررسی می‌کنند که آیا این شماره بزرگ‌تر از شماره‌های قبلی است. اگر بله، قول می‌دهند که پیشنهادهای قدیمی‌تر را نپذیرند.
2. **مرحله پذیرش (Accept)**:
   - اگر اکثریت پذیرنده‌ها پیشنهاد را تأیید کنند، پیشنهاددهنده یک مقدار پیشنهادی (Value) را به پذیرنده‌ها ارسال می‌کند.
   - پذیرنده‌ها این مقدار را می‌پذیرند، مشروط بر اینکه قول‌های قبلی نقض نشود.
3. **مرحله تأیید (Commit)**:
   - پس از پذیرش مقدار توسط اکثریت پذیرنده‌ها، یادگیرنده‌ها از مقدار توافق‌شده مطلع می‌شوند.

### نقاط قوت و پیچیدگی Paxos
- **نقاط قوت**:
  - تحمل خرابی‌های متعدد (تا زمانی که اکثریت گره‌ها سالم باشند).
  - تضمین ایمنی (Safety): هیچ‌گاه دو مقدار متضاد تأیید نمی‌شوند.
  - مناسب برای سیستم‌های پیچیده با نیاز به سازگاری قوی.
- **پیچیدگی**:
  - درک و پیاده‌سازی Paxos دشوار است، زیرا شامل مراحل متعدد و مدیریت پیام‌های پیچیده است.
  - بهینه‌سازی عملکرد آن چالش‌برانگیز است، به‌ویژه در مقیاس‌های بزرگ.
  - مستعد بن‌بست (Deadlock) است اگر چندین پیشنهاددهنده به‌طور همزمان رقابت کنند.

---

## مروری بر پروتکل Raft

**Raft** یک پروتکل اجماع است که در سال 2014 توسط دیگو اونگارو و جان اوسترهاوت معرفی شد. هدف Raft ساده‌سازی مفاهیم اجماع نسبت به Paxos و ارائه یک پروتکل قابل فهم‌تر بود.

### اهداف طراحی Raft
- **قابلیت درک**: Raft به‌گونه‌ای طراحی شده که برای مهندسان و توسعه‌دهندگان قابل فهم باشد.
- **ایمنی و تحمل‌پذیری خطا**: مانند Paxos، Raft ایمنی را تضمین می‌کند و در برابر خرابی‌ها مقاوم است.
- **عملکرد عملی**: Raft برای استفاده در سیستم‌های واقعی بهینه شده است.

### اجزای کلیدی Raft
1. **انتخاب رهبر (Leader Election)**:
   - گره‌ها در یکی از سه حالت هستند: **رهبر (Leader)**، **پیرو (Follower)** یا **کاندیدا (Candidate)**.
   - اگر رهبر از دسترس خارج شود، گره‌ها با رأی‌گیری یک رهبر جدید انتخاب می‌کنند.
   - برای جلوگیری از Split-Brain، تنها گره‌ای که اکثریت آرا را کسب کند، رهبر می‌شود.
2. **تکثیر لاگ (Log Replication)**:
   - رهبر تمام به‌روزرسانی‌ها را به‌صورت لاگ به پیروان ارسال می‌کند.
   - پیروان لاگ‌ها را کپی کرده و تأیید می‌کنند، که تضمین می‌کند داده‌ها در تمام گره‌ها سازگار هستند.
3. **ایمنی (Safety)**:
   - Raft تضمین می‌کند که فقط یک رهبر در هر دوره (Term) وجود دارد.
   - قوانین سخت‌گیرانه‌ای برای اطمینان از سازگاری لاگ‌ها اعمال می‌شود.

### نقاط قوت Raft
- درک و پیاده‌سازی آسان‌تر نسبت به Paxos.
- مدیریت واضح‌تر انتخاب رهبر و تکثیر لاگ.
- بهینه برای سیستم‌های واقعی با نیاز به هماهنگی ساده.

---

## مقایسه Paxos و Raft

### تفاوت‌ها
1. **پیچیدگی و قابلیت درک**:
   - **Paxos**: پیچیده و دشوار برای پیاده‌سازی. توضیح مراحل آن برای مهندسان جدید چالش‌برانگیز است.
   - **Raft**: طراحی شده تا قابل فهم باشد، با مراحل واضح و مستندات بهتر.
2. **مدیریت رهبر**:
   - **Paxos**: از چندین پیشنهاددهنده پشتیبانی می‌کند، که می‌تواند به رقابت و بن‌بست منجر شود.
   - **Raft**: همیشه یک رهبر واحد در هر دوره دارد، که هماهنگی را ساده‌تر می‌کند.
3. **کارایی و بهینه‌سازی**:
   - **Paxos**: برای سناریوهای پیچیده‌تر مناسب است، اما بهینه‌سازی آن دشوار است.
   - **Raft**: برای اکثر موارد عملی بهینه‌تر است و پیاده‌سازی‌های استاندارد آن (مانند etcd) عملکرد خوبی دارند.
4. **پذیرش در صنعت**:
   - **Paxos**: در سیستم‌های قدیمی‌تر و پیچیده مانند Google Chubby استفاده شده است.
   - **Raft**: به دلیل سادگی، در ابزارهای مدرن مانند etcd و Consul محبوبیت بیشتری دارد.

### موارد استفاده مناسب
- **Paxos**: مناسب برای سیستم‌هایی که نیاز به انعطاف‌پذیری بالا و تحمل سناریوهای پیچیده دارند (مانند Google Spanner یا Chubby).
- **Raft**: مناسب برای سیستم‌هایی که نیاز به پیاده‌سازی ساده و قابل فهم دارند (مانند etcd، Consul یا سیستم‌های مبتنی بر Kubernetes).

---

## سیستم‌های واقعی استفاده‌کننده از Paxos یا Raft

1. **Google Chubby**:
   - **پروتکل**: Paxos.
   - **کاربرد**: یک سرویس قفل توزیع‌شده که برای هماهنگی بین سرویس‌های گوگل (مانند GFS و Bigtable) استفاده می‌شود.
   - **چرا Paxos؟**: Chubby به سازگاری قوی و تحمل سناریوهای پیچیده نیاز دارد، که Paxos آن را فراهم می‌کند.

2. **etcd**:
   - **پروتکل**: Raft.
   - **کاربرد**: ذخیره‌سازی کلید-مقدار توزیع‌شده که در Kubernetes برای مدیریت پیکربندی و هماهنگی استفاده می‌شود.
   - **چرا Raft؟**: سادگی پیاده‌سازی و قابلیت اطمینان بالا.

3. **Consul**:
   - **پروتکل**: Raft.
   - **کاربرد**: ابزار کشف سرویس و مدیریت پیکربندی در سیستم‌های توزیع‌شده.
   - **چرا Raft؟**: Consul از Raft برای ارائه یک پروتکل اجماع قابل فهم و کارآمد استفاده می‌کند.

---

## اهمیت پروتکل‌های اجماع در سیستم‌های توزیع‌شده

پروتکل‌های اجماع مانند Paxos و Raft ستون فقرات سیستم‌های توزیع‌شده مقاوم در برابر خرابی و با دسترسی بالا هستند:
- **تحمل‌پذیری خطا**: این پروتکل‌ها تضمین می‌کنند که سیستم حتی در صورت خرابی گره‌ها یا پارتیشن‌بندی شبکه به کار خود ادامه دهد.
- **سازگاری قوی**: با استفاده از اجماع، سیستم‌ها می‌توانند داده‌های سازگار را در سراسر گره‌ها حفظ کنند.
- **هماهنگی**: پروتکل‌های اجماع امکان انتخاب رهبر، تخصیص منابع و ترتیب‌بندی عملیات را فراهم می‌کنند.
- **مقیاس‌پذیری**: با مدیریت هماهنگی بین گره‌ها، این پروتکل‌ها به سیستم‌ها اجازه می‌دهند تا در مقیاس‌های بزرگ عمل کنند.

---

## نتیجه‌گیری

پروتکل‌های اجماع Paxos و Raft ابزارهای کلیدی برای حل مشکلات هماهنگی و سازگاری در سیستم‌های توزیع‌شده هستند. **Paxos** با وجود پیچیدگی، برای سیستم‌های پیچیده با نیازهای خاص مناسب است و در محصولاتی مانند Google Chubby استفاده شده است. **Raft** با تمرکز بر سادگی و قابلیت درک، در ابزارهای مدرن مانند etcd و Consul محبوبیت یافته است. مهندسان نرم‌افزار باید با توجه به نیازهای سیستم (مانند پیچیدگی، مقیاس‌پذیری و سهولت پیاده‌سازی) پروتکل مناسب را انتخاب کنند. درک این پروتکل‌ها برای طراحی سیستم‌های توزیع‌شده مقاوم و کارآمد ضروری است.