# اصول امنیتی احراز هویت و مجوزدهی در طراحی سیستم

## تعریف و تفاوت‌های احراز هویت و مجوزدهی

**احراز هویت (Authentication)** و **مجوزدهی (Authorization)** دو اصل اساسی در امنیت سیستم‌ها هستند که هر کدام نقش متفاوتی در حفاظت از منابع و داده‌ها ایفا می‌کنند.

- **احراز هویت (Authentication)**:
  - به فرآیند تأیید هویت یک کاربر، دستگاه یا موجودیت اشاره دارد. هدف آن اطمینان از این است که فرد یا سیستم ادعاکننده، همان کسی است که ادعا می‌کند.
  - مثال: ورود به یک وب‌سایت با استفاده از نام کاربری و رمز عبور.
  - سؤالموردنظر: «شما کی هستید؟»

- **مجوزدهی (Authorization)**:
  - به فرآیند تعیین دسترسی‌ها و مجوزهای یک موجودیت احراز هویت‌شده اشاره دارد. این مرحله مشخص می‌کند که کاربر یا سیستم چه اقداماتی را می‌تواند انجام دهد.
  - مثال: تعیین اینکه یک کاربر می‌تواند یک فایل را بخواند یا ویرایش کند.
  - سؤالموردنظر: «شما چه کاری می‌توانید انجام دهید؟»

### تفاوت‌های کلیدی
| ویژگی                | احراز هویت                              | مجوزدهی                                |
|---------------------|-----------------------------------------|----------------------------------------|
| **هدف**            | تأیید هویت کاربر یا سیستم              | تعیین سطح دسترسی و مجوزها             |
| **مرحله**          | اولین گام در فرآیند امنیت              | پس از احراز هویت انجام می‌شود         |
| **مثال**           | ورود با رمز عبور یا OAuth             | دسترسی به یک فایل خاص یا API           |
| **تمرکز**          | شناسایی هویت                          | مدیریت دسترسی                         |

---

## روش‌های رایج احراز هویت

برای تأیید هویت کاربران و سیستم‌ها، روش‌های متعددی وجود دارند که بسته به نیازهای امنیتی و تجربه کاربری انتخاب می‌شوند:

1. **نام کاربری و رمز عبور**:
   - ساده‌ترین و رایج‌ترین روش احراز هویت.
   - کاربر یک نام کاربری و رمز عبور ارائه می‌دهد که با اطلاعات ذخیره‌شده (معمولاً به‌صورت رمزنگاری‌شده) مقایسه می‌شود.
   - چالش‌ها: خطر سرقت رمز عبور، حملات فیشینگ یا Brute Force.

2. **OAuth 2.0**:
   - یک پروتکل استاندارد برای احراز هویت و مجوزدهی که امکان دسترسی امن به منابع را از طریق توکن‌ها فراهم می‌کند.
   - مثال: ورود به یک برنامه با استفاده از حساب گوگل یا فیسبوک.
   - مزایا: کاهش نیاز به ذخیره رمزهای عبور و بهبود تجربه کاربری.

3. **ورود یکپارچه (Single Sign-On - SSO)**:
   - به کاربران امکان می‌دهد با یک‌بار احراز هویت به چندین سیستم یا برنامه دسترسی پیدا کنند.
   - مثال: استفاده از SSO در سازمان‌ها برای دسترسی به ابزارهای مختلف با یک مجموعه اعتبار.
   - مزایا: کاهش تعداد ورودها و مدیریت ساده‌تر هویت.

4. **احراز هویت چندمرحله‌ای (Multi-Factor Authentication - MFA)**:
   - از کاربران می‌خواهد چندین عامل (مانند چیزی که می‌دانند، چیزی که دارند یا چیزی که هستند) را برای تأیید هویت ارائه دهند.
   - مثال: ترکیب رمز عبور (دانش) با کد ارسالی به تلفن (مالکیت) یا اسکن اثر انگشت (بیومتریک).
   - مزایا: افزایش امنیت با کاهش خطر سرقت هویت.

---

## مکانیزم‌های رایج مجوزدهی

پس از احراز هویت، سیستم باید تعیین کند که کاربر یا سیستم چه دسترسی‌هایی دارد. مکانیزم‌های رایج مجوزدهی عبارت‌اند از:

1. **کنترل دسترسی مبتنی بر نقش (Role-Based Access Control - RBAC)**:
   - دسترسی‌ها بر اساس نقش‌های تعریف‌شده (مانند مدیر، کاربر، ویرایشگر) تخصیص داده می‌شوند.
   - مثال: در یک سیستم مدیریت محتوا، فقط کاربران با نقش «ویرایشگر» می‌توانند مقالات را ویرایش کنند.
   - مزایا: مدیریت ساده و مناسب برای سیستم‌های با تعداد کاربران زیاد.

2. **کنترل دسترسی مبتنی بر ویژگی (Attribute-Based Access Control - ABAC)**:
   - دسترسی‌ها بر اساس ویژگی‌های کاربر، منبع یا محیط (مانند زمان، مکان یا نوع دستگاه) تعیین می‌شوند.
   - مثال: فقط کاربرانی که در یک مکان خاص (مانند دفتر شرکت) هستند می‌توانند به یک فایل حساس دسترسی داشته باشند.
   - مزایا: انعطاف‌پذیری بالا و مناسب برای سیستم‌های پیچیده.

3. **کنترل دسترسی مبتنی بر لیست (Access Control Lists - ACL)**:
   - فهرستی از کاربران و دسترسی‌های مجاز برای هر منبع تعریف می‌شود.
   - مثال: یک فایل در سرور فقط برای کاربران خاصی قابل خواندن است.
   - محدودیت: مدیریت دشوار در سیستم‌های بزرگ.

---

## پیاده‌سازی در سیستم‌های مدرن

### احراز هویت با OAuth 2.0
- **کاربرد**: در سیستم‌هایی مانند توییتر یا گوگل، OAuth 2.0 برای احراز هویت کاربران و دسترسی به APIها استفاده می‌شود.
- **نحوه کار**:
  - کاربر از طریق یک ارائه‌دهنده هویت (مانند گوگل) احراز هویت می‌شود.
  - یک توکن دسترسی (Access Token) تولید می‌شود که برای دسترسی به منابع استفاده می‌شود.
  - مثال: ورود به یک برنامه با استفاده از حساب فیسبوک، که OAuth 2.0 یک توکن موقت برای دسترسی به اطلاعات کاربر صادر می‌کند.
- **مزایا**: امنیت بالا، کاهش نیاز به ذخیره رمزهای عبور و پشتیبانی از SSO.

### استفاده از JWT برای مجوزدهی
- **JSON Web Token (JWT)**: یک استاندارد توکن‌سازی که شامل اطلاعات هویتی و مجوزهای کاربر است و به‌صورت رمزنگاری‌شده امضا می‌شود.
- **کاربرد**: در APIهای RESTful، JWT برای احراز هویت و مجوزدهی استفاده می‌شود.
- **نحوه کار**:
  - سرور یک توکن JWT پس از احراز هویت تولید می‌کند که شامل بخش‌های Header، Payload و Signature است.
  - کاربر این توکن را در درخواست‌های بعدی ارسال می‌کند و سرور آن را برای تأیید دسترسی بررسی می‌کند.
  - مثال: در یک برنامه وب، JWT برای دسترسی به APIهای محافظت‌شده استفاده می‌شود.
- **مزایا**: بدون نیاز به ذخیره جلسه در سرور، مقیاس‌پذیری بالا و امنیت قوی.

---

## خطرات امنیتی طراحی ضعیف احراز هویت و مجوزدهی

طراحی نادرست احراز هویت و مجوزدهی می‌تواند خطرات جدی ایجاد کند:
1. **ربایش جلسه (Session Hijacking)**:
   - اگر توکن‌های جلسه (مانند JWT یا کوکی‌ها) به‌درستی ایمن نشوند، مهاجمان می‌توانند آن‌ها را سرقت کرده و به‌جای کاربر عمل کنند.
   - راه‌حل: استفاده از HTTPS، توکن‌های با طول عمر کوتاه و ذخیره امن کوکی‌ها.
2. **ارتقای امتیاز (Privilege Escalation)**:
   - طراحی ضعیف مجوزدهی می‌تواند به کاربران اجازه دهد به منابعی دسترسی پیدا کنند که مجاز به آن نیستند.
   - مثال: اگر RBAC به‌درستی پیاده‌سازی نشود، یک کاربر عادی ممکن است به نقش مدیر دسترسی پیدا کند.
   - راه‌حل: بررسی دقیق دسترسی‌ها و استفاده از اصل حداقل امتیاز (Least Privilege).
3. **حملات Brute Force**:
   - رمزهای عبور ضعیف یا عدم محدودیت در تعداد تلاش‌های ورود می‌توانند به نفوذ منجر شوند.
   - راه‌حل: استفاده از MFA و محدود کردن تعداد تلاش‌های ورود.
4. **نشت توکن یا اطلاعات حساس**:
   - ذخیره نادرست توکن‌ها یا اطلاعات احراز هویت می‌تواند به افشای اطلاعات منجر شود.
   - راه‌حل: رمزنگاری اطلاعات حساس و استفاده از روش‌های امن ذخیره‌سازی.

---

## بهترین روش‌ها برای مدیریت امن هویت در برنامه‌های مقیاس‌پذیر

1. **استفاده از استانداردهای امن**:
   - از پروتکل‌های استاندارد مانند OAuth 2.0، OpenID Connect یا SAML برای احراز هویت و مجوزدهی استفاده کنید.
   - JWT را با امضای رمزنگاری‌شده (مانند HMAC یا RSA) پیاده‌سازی کنید.
2. **اصل حداقل امتیاز**:
   - به کاربران و سیستم‌ها فقط دسترسی‌های موردنیاز را اعطا کنید.
   - از RBAC یا ABAC برای مدیریت دقیق دسترسی‌ها استفاده کنید.
3. **پیاده‌سازی MFA**:
   - احراز هویت چندمرحله‌ای را برای افزایش امنیت، به‌ویژه در سیستم‌های حساس، فعال کنید.
4. **امنیت توکن‌ها و جلسات**:
   - از توکن‌های با طول عمر کوتاه استفاده کنید و مکانیزم‌های Refresh Token را پیاده‌سازی کنید.
   - جلسات را با استفاده از HTTPS و ویژگی‌های امن کوکی‌ها (مانند HttpOnly و Secure) محافظت کنید.
5. **مانیتورینگ و ثبت وقایع**:
   - تمام فعالیت‌های احراز هویت و مجوزدهی را ثبت کنید تا در صورت بروز مشکل، قابل ردیابی باشند.
   - از ابزارهای مانیتورینگ برای شناسایی فعالیت‌های مشکوک (مانند تلاش‌های مکرر ورود) استفاده کنید.
6. **رمزنگاری داده‌های حساس**:
   - رمزهای عبور را با الگوریتم‌های قوی مانند bcrypt یا Argon2 رمزنگاری کنید.
   - اطلاعات حساس مانند توکن‌ها را در پایگاه داده به‌صورت رمزنگاری‌شده ذخیره کنید.
7. **آزمایش و ممیزی امنیتی**:
   - سیستم را به‌طور منظم برای آسیب‌پذیری‌های امنیتی (مانند تزریق SQL یا نقص‌های JWT) آزمایش کنید.
   - از ابزارهای اسکن امنیتی و ممیزی‌های دوره‌ای استفاده کنید.

---

## خلاصه و مقایسه کاربرد احراز هویت و مجوزدهی

- **احراز هویت** اولین لایه امنیتی است که هویت کاربر یا سیستم را تأیید می‌کند. روش‌هایی مانند OAuth 2.0 و MFA برای افزایش امنیت و تجربه کاربری مناسب هستند.
- **مجوزدهی** دسترسی‌های کاربر را پس از احراز هویت مدیریت می‌کند. RBAC برای سیستم‌های ساده و ABAC برای سیستم‌های پیچیده‌تر مناسب است.
- **زمان استفاده**:
  - **احراز هویت** در هر سیستمی که نیاز به شناسایی کاربران دارد (مانند وب‌سایت‌ها، APIها یا برنامه‌های سازمانی) ضروری است.
  - **مجوزدهی** برای کنترل دقیق دسترسی‌ها در سیستم‌های چندکاربره یا حساس (مانند سیستم‌های بانکی یا مدیریت محتوا) حیاتی است.
- **کاربرد مؤثر**:
  - از احراز هویت قوی (مانند MFA و OAuth) برای محافظت از هویت کاربران استفاده کنید.
  - از مکانیزم‌های مجوزدهی انعطاف‌پذیر (مانند ABAC) برای مدیریت دسترسی در سیستم‌های مقیاس‌پذیر و پیچیده بهره ببرید.
  - ترکیب این دو لایه با بهترین روش‌ها (مانند رمزنگاری، مانیتورینگ و اصل حداقل امتیاز) امنیت سیستم را به حداکثر می‌رساند.

درک و پیاده‌سازی صحیح احراز هویت و مجوزدهی برای طراحی سیستم‌های امن و مقیاس‌پذیر ضروری است. مهندسان نرم‌افزار باید با توجه به نیازهای سیستم و تهدیدات امنیتی، روش‌های مناسب را انتخاب کرده و از بهترین روش‌ها برای کاهش خطرات استفاده کنند.